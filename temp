private void unzipFile(Path zipFile, Path targetDir) throws IOException {
    // 1. Validate ZIP input
    if (zipFile == null || !Files.exists(zipFile) || !Files.isRegularFile(zipFile) || !Files.isReadable(zipFile)) {
        throw new IOException("Invalid zip file: " + zipFile);
    }

    // 2. Prepare target directory
    Files.createDirectories(targetDir);
    Path canonicalBase = targetDir.toRealPath(LinkOption.NOFOLLOW_LINKS);

    log.info("Unzipping: {}", zipFile.toRealPath(LinkOption.NOFOLLOW_LINKS));
    log.info("Target directory: {}", canonicalBase);

    final int    MAX_ENTRIES = 10_000;
    final long   MAX_TOTAL_SIZE = 1_000_000_000L; // 1 GB
    final double MAX_RATIO = 10.0;

    int entryCount = 0;
    long totalSize = 0;

    try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zipFile))) {
        ZipEntry entry;
        byte[] buffer = new byte[4096];

        while ((entry = zis.getNextEntry()) != null) {
            String entryName = entry.getName();
            if (entryName == null || entryName.isBlank()) {
                throw new IOException("Invalid entry name");
            }

            // 3. Validate entry name characters
            if (!entryName.matches("^[A-Za-z0-9._\\-\\s/]+$")) {
                throw new IOException("Illegal characters in entry name: " + entryName);
            }

            // 4. Reject traversal or absolute paths
            if (entryName.contains("..") || entryName.startsWith("/") || entryName.startsWith("\\") || entryName.contains(":")) {
                throw new IOException("Unsafe entry name: " + entryName);
            }

            // 5. Resolve output path and verify containment
            Path outputPath = canonicalBase.resolve(entryName).normalize();
            Path canonicalOutput = outputPath.toRealPath(LinkOption.NOFOLLOW_LINKS);

            if (!canonicalOutput.startsWith(canonicalBase)) {
                throw new IOException("Entry is outside target directory: " + entryName);
            }

            // 6. Create directories safely
            if (entry.isDirectory()) {
                Files.createDirectories(outputPath);
                zis.closeEntry();
                continue;
            }

            Files.createDirectories(outputPath.getParent());

            // 7. Write file with zip-bomb and size checks
            try (OutputStream os = new BufferedOutputStream(Files.newOutputStream(outputPath))) {
                int bytesRead;
                long entrySize = 0;
                long compressedSize = entry.getCompressedSize();

                while ((bytesRead = zis.read(buffer)) > 0) {
                    os.write(buffer, 0, bytesRead);
                    entrySize += bytesRead;
                    totalSize += bytesRead;

                    if (compressedSize > 0 && (double) entrySize / compressedSize > MAX_RATIO) {
                        throw new IOException("Zip bomb detected (ratio > " + MAX_RATIO + ")");
                    }

                    if (totalSize > MAX_TOTAL_SIZE) {
                        throw new IOException("Archive too large (>" + MAX_TOTAL_SIZE + " bytes)");
                    }
                }
            }

            entryCount++;
            if (entryCount > MAX_ENTRIES) {
                throw new IOException("Too many entries (" + entryCount + ")");
            }

            zis.closeEntry();
        }
    }

    log.info("Unzip completed: {} entries, {} bytes extracted", entryCount, totalSize);
}
