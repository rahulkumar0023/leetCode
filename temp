import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestTemplateBuilder;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class RestApiClientTest {

    @Mock
    private RestTemplateBuilder restTemplateBuilder;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ObjectMapper objectMapper;

    private RestApiClient restApiClient;

    @BeforeEach
    void setUp() {
        // Mock RestTemplate behavior
        when(restTemplateBuilder.basicAuthentication(anyString(), anyString())).thenReturn(restTemplateBuilder);
        when(restTemplateBuilder.build()).thenReturn(restTemplate);

        // Manually instantiate RestApiClient with mocked dependencies
        restApiClient = new RestApiClient(restTemplateBuilder, objectMapper);
    }

    @Test
    void testNotifyUpload_Success_A() throws Exception {
        // Mock Response
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenReturn(mockResponse);
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");

        // Execute
        assertDoesNotThrow(() -> restApiClient.notifyUpload("A", "test-file.pgp"));

        // Verify that exchange() was called once
        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(String.class), any(Map.class));
    }

    @Test
    void testNotifyUpload_Success_B() throws Exception {
        // Mock Response
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenReturn(mockResponse);
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");

        // Execute
        assertDoesNotThrow(() -> restApiClient.notifyUpload("B", "test-file.pgp"));

        // Verify that exchange() was called once
        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(String.class), any(Map.class));
    }

    @Test
    void testNotifyUpload_InvalidDestination() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                restApiClient.notifyUpload("C", "test-file.pgp")
        );
        assertEquals("❌ Invalid destination: C", exception.getMessage());
    }

    @Test
    void testNotifyUpload_ApiCallFailure() throws Exception {
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenThrow(new RuntimeException("API Error"));

        Exception exception = assertThrows(RuntimeException.class, () ->
                restApiClient.notifyUpload("A", "test-file.pgp")
        );
        assertEquals("API Error", exception.getMessage());
    }
}


🚀 Convert a PGP Key String to a File Parameter Without Writing to Disk

Since your encryption utility expects a File parameter, but you only have the key as a String, you can use an in-memory temporary file.

⸻

✅ Convert PGP Key String to a File in Java

Use File.createTempFile() to convert the string to a temporary file and pass it as a parameter.

🔹 Convert String to a Temporary File

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class PGPFileUtil {

    public static File convertStringToTempFile(String keyContent, String filePrefix) throws IOException {
        // ✅ Create a temporary file with .asc extension
        File tempFile = File.createTempFile(filePrefix, ".asc");
        
        // ✅ Write the key content to the temporary file
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write(keyContent);
        }

        // ✅ Auto-delete file when JVM exits
        tempFile.deleteOnExit();
        return tempFile;
    }
}



⸻

✅ Example: Pass PGP Key as a File Parameter

Now, modify your method that requires a File parameter.

import java.io.File;
import java.io.IOException;

public class PGPKeyLoader {

    public void loadPGPKey(File pgpKeyFile) {
        // Your encryption utility logic that accepts a File
        System.out.println("Using PGP Key File: " + pgpKeyFile.getAbsolutePath());
    }

    public static void main(String[] args) throws IOException {
        // Simulated PGP Key as a String
        String pgpKeyString = "-----BEGIN PGP PRIVATE KEY BLOCK-----\n...\n-----END PGP PRIVATE KEY BLOCK-----";

        // ✅ Convert to temporary File
        File pgpKeyFile = PGPFileUtil.convertStringToTempFile(pgpKeyString, "pgp-key");

        // ✅ Pass the file to the method
        new PGPKeyLoader().loadPGPKey(pgpKeyFile);
    }
}



⸻

✅ Why This Works

✔ Your method still receives a File parameter ✅
✔ No manual disk storage (temporary file is deleted automatically) ✅
✔ Works seamlessly with utilities that require file input ✅

🚀 Now, you can use PGP keys from a string without needing permanent storage!
Let me know if you need further refinements! 😊
