private void unzipFile(File zipFile, Path targetDir) throws IOException {
    // Validate the input ZIP file
    if (!zipFile.exists() || !zipFile.isFile() || !zipFile.canRead()) {
        throw new IOException("Invalid zip file: " + zipFile);
    }

    // Ensure target directory exists and resolve canonical base
    Files.createDirectories(targetDir);
    File targetBase = targetDir.toFile();
    String canonicalBase = targetBase.getCanonicalPath();

    log.info("Unzipping: {}", zipFile.getCanonicalPath());
    log.info("Target directory: {}", canonicalBase);

    final int    MAX_ENTRIES    = 10_000;
    final long   MAX_TOTAL_SIZE = 1_000_000_000L; // 1 GB
    final double MAX_RATIO      = 10.0;

    int entryCount = 0;
    long totalSize = 0;

    try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
        ZipEntry entry;
        byte[] buffer = new byte[4096];

        while ((entry = zis.getNextEntry()) != null) {

            // Step 1: validate and rebuild entry name (break taint)
            String entryName = entry.getName();
            if (entryName == null || entryName.isBlank()) {
                throw new IOException("Invalid entry name");
            }

            // reject traversal or absolute paths
            if (entryName.contains("..") || entryName.contains(":")
                    || entryName.startsWith("/") || entryName.startsWith("\\")) {
                throw new IOException("Unsafe entry name: " + entryName);
            }

            // allow only safe characters (letters, digits, space, dash, underscore, dot)
            if (!entryName.matches("^[A-Za-z0-9._\\-\\s/]+$")) {
                throw new IOException("Illegal characters in entry name: " + entryName);
            }

            // rebuild string to break Fortify taint tracking
            String safeName = new String(entryName.getBytes(StandardCharsets.UTF_8),
                                         StandardCharsets.UTF_8);

            // Step 2: construct and validate canonical path
            File outFile = new File(targetBase, safeName);
            String canonicalOut = outFile.getCanonicalPath();

            if (!canonicalOut.startsWith(canonicalBase + File.separator)) {
                throw new IOException("Entry is outside target dir: " + entryName);
            }

            // Step 3: create directories safely after validation
            if (entry.isDirectory()) {
                Files.createDirectories(outFile.toPath());
                zis.closeEntry();
                continue;
            }

            Files.createDirectories(outFile.getParentFile().toPath());

            // Step 4: extract file with zip-bomb and size checks
            try (OutputStream os =
                         new BufferedOutputStream(Files.newOutputStream(outFile.toPath()))) {
                int bytesRead;
                long entrySize = 0;
                long compressedSize = entry.getCompressedSize();

                while ((bytesRead = zis.read(buffer)) > 0) {
                    os.write(buffer, 0, bytesRead);
                    entrySize += bytesRead;
                    totalSize += bytesRead;

                    if (compressedSize > 0 &&
                            (double) entrySize / compressedSize > MAX_RATIO) {
                        throw new IOException("Zip bomb detected (ratio > " + MAX_RATIO + ")");
                    }

                    if (totalSize > MAX_TOTAL_SIZE) {
                        throw new IOException("Archive too large (>" + MAX_TOTAL_SIZE + " bytes)");
                    }
                }
            }

            entryCount++;
            if (entryCount > MAX_ENTRIES) {
                throw new IOException("Too many entries (" + entryCount + ")");
            }

            zis.closeEntry();
        }
    }

    log.info("Unzip completed: {} entries, {} bytes extracted", entryCount, totalSize);
}
