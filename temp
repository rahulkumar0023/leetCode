To support dynamic **additional properties** (like `additionalPropertyXName`, `additionalPropertyXValue`, etc.) and map them into a list of `ItemPropertyType` in your DTO and UBL invoice, here's how to do it cleanly and maintainably:

---

### ✅ Step 1: Update `CsvInvoiceDto`

Add flat fields for each property name/value pair:

```java
private String additionalPropertyXName;
private String additionalPropertyXValue;
private String additionalPropertyYName;
private String additionalPropertyYValue;
private String additionalPropertyZName;
private String additionalPropertyZValue;
```

If you want a more dynamic model, you could do this with a `Map<String, String>` but that would require a custom `FieldSetMapper`.

---

### ✅ Step 2: Update the Mapper

In your `CsvInvoiceMapper`, define a helper method that maps the flat name/value pairs to `ItemPropertyType` instances:

```java
default List<ItemPropertyType> toAdditionalItemProperties(CsvInvoiceDto dto) {
    List<ItemPropertyType> props = new ArrayList<>();

    if (dto.getAdditionalPropertyXName() != null && dto.getAdditionalPropertyXValue() != null) {
        props.add(toItemProperty(dto.getAdditionalPropertyXName(), dto.getAdditionalPropertyXValue()));
    }
    if (dto.getAdditionalPropertyYName() != null && dto.getAdditionalPropertyYValue() != null) {
        props.add(toItemProperty(dto.getAdditionalPropertyYName(), dto.getAdditionalPropertyYValue()));
    }
    if (dto.getAdditionalPropertyZName() != null && dto.getAdditionalPropertyZValue() != null) {
        props.add(toItemProperty(dto.getAdditionalPropertyZName(), dto.getAdditionalPropertyZValue()));
    }

    return props;
}

default ItemPropertyType toItemProperty(String name, String value) {
    ItemPropertyType property = new ItemPropertyType();

    NameType nameType = new NameType();
    nameType.setValue(name);
    property.setName(nameType);

    ValueType valueType = new ValueType();
    valueType.setValue(value);
    property.setValue(valueType);

    return property;
}
```

---

### ✅ Step 3: Wire into `InvoiceLine` mapping

If you're already mapping an `Item` object in each `InvoiceLine`, set the `additionalItemProperty` like this:

```java
ItemType item = new ItemType();
item.setName(toName(dto.getItemCbcName()));
item.setAdditionalItemProperty(toAdditionalItemProperties(dto));
line.setItem(item);
```

---

### ✅ Optional: CSV Header

Make sure your CSV headers align:

```csv
...,additionalPropertyXName,additionalPropertyXValue,additionalPropertyYName,additionalPropertyYValue,...
```

---

Let me know if you'd like this to work dynamically for any number of property pairs (not just X/Y/Z), and I can help you implement a more generic solution using reflection or a `Map<String, String>`.
