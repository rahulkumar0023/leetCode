@Component
public class InvoiceWriter implements ItemWriter<InvoiceType>, StepExecutionListener {

    private final Logger log = LoggerFactory.getLogger(getClass());
    private ExecutionContext context;

    @Override
    public void beforeStep(StepExecution stepExecution) {
        this.context = stepExecution.getExecutionContext();
    }

    @Override
    public ExitStatus afterStep(StepExecution stepExecution) {
        return ExitStatus.COMPLETED;
    }

    @Override
    public void write(Chunk<? extends InvoiceType> items) {
        for (InvoiceType invoice : items) {
            String sourcePath = (String) context.get("current.file");
            if (sourcePath != null) {
                Path source = Paths.get(sourcePath);
                Path target = Paths.get("processed", source.getFileName().toString());

                try {
                    Files.createDirectories(target.getParent());
                    Files.move(source, target, StandardCopyOption.REPLACE_EXISTING);
                    log.info("Moved file {} to {}", source, target);
                } catch (IOException e) {
                    log.error("Failed to move file", e);
                }
            }

            log.info("Processed invoice ID: {}", invoice.getID().getValue());
        }
    }
}
