Great — a `Tasklet` is the perfect fit when you want to perform **imperative, single-purpose logic**, like fetching, decrypting, and unzipping files in sequence. Here's how you can structure it:

---

## ✅ Plan

Create a `DecryptAndUnzipTasklet` that:

1. Calls `cosService.fetchEncryptedFiles()` → returns `List<File>`
2. Decrypts each `.zip.pgp` file → returns decrypted `.zip` files
3. Unzips each `.zip` file into `/tmp/unzipped/` or another working directory

---

## ✅ 1. `CosStorageService.java` (simplified)

```java
@Component
public class CosStorageService {

    public List<File> fetchEncryptedFiles() {
        // Simulate fetching encrypted files from COS to /tmp
        return List.of(new File("/tmp/invoice-batch-1.zip.pgp"));
    }
}
```

---

## ✅ 2. `DecryptAndUnzipTasklet.java`

```java
@Component
public class DecryptAndUnzipTasklet implements Tasklet {

    private final CosStorageService cosService;

    public DecryptAndUnzipTasklet(CosStorageService cosService) {
        this.cosService = cosService;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        List<File> encryptedFiles = cosService.fetchEncryptedFiles();
        for (File encrypted : encryptedFiles) {
            File decryptedZip = decryptFile(encrypted);
            unzipFile(decryptedZip, Paths.get("/tmp/unzipped"));
        }
        return RepeatStatus.FINISHED;
    }

    private File decryptFile(File encryptedFile) throws IOException {
        // Simulated decryption: just rename file (in real life, use BouncyCastle, etc.)
        File decrypted = new File(encryptedFile.getAbsolutePath().replace(".pgp", ""));
        Files.copy(encryptedFile.toPath(), decrypted.toPath(), StandardCopyOption.REPLACE_EXISTING);
        System.out.println("Decrypted: " + decrypted.getName());
        return decrypted;
    }

    private void unzipFile(File zipFile, Path targetDir) throws IOException {
        targetDir.toFile().mkdirs();
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File outFile = targetDir.resolve(entry.getName()).toFile();
                try (FileOutputStream fos = new FileOutputStream(outFile)) {
                    zis.transferTo(fos);
                }
                System.out.println("Extracted: " + outFile.getName());
            }
        }
    }
}
```

---

## ✅ 3. Add to Your Batch Config

```java
@Bean
public Step decryptUnzipStep(JobRepository repo, PlatformTransactionManager tx,
                              DecryptAndUnzipTasklet tasklet) {
    return new StepBuilder("decryptUnzipStep", repo)
            .tasklet(tasklet, tx)
            .build();
}
```

Then chain it before your invoice step in the job:

```java
@Bean
public Job invoiceJob(JobRepository repo, Step decryptUnzipStep, Step invoiceStep) {
    return new JobBuilder("invoiceJob", repo)
            .start(decryptUnzipStep)
            .next(invoiceStep)
            .build();
}
```

---

## ✅ Result

Your batch job now:

1. **Fetches** `.zip.pgp` files from COS
2. **Decrypts** them to `.zip`
3. **Unzips** them into `/tmp/unzipped`
4. **Then Step 2** reads & processes each XML invoice

---

Would you like a test tasklet runner or unit tests for this setup?




Yes — splitting into **three dedicated steps** is an excellent design. It provides:

* ✅ Clear separation of concerns
* ✅ Easier debugging
* ✅ Independent retries
* ✅ Cleaner logging and exception handling

---

## ✅ Recommended 3-Step Spring Batch Job

### 🔹 **Step 1: `fetchEncryptedStep`**

* Fetch `.zip.pgp` files from COS (download to `/tmp/encrypted`)
* Store downloaded `File` paths in `ExecutionContext` or local directory

### 🔹 **Step 2: `decryptAndUnzipStep`**

* Read the encrypted files from `/tmp/encrypted`
* Decrypt `.pgp` → `.zip`
* Unzip `.zip` → `.xml` into `/tmp/unzipped`

### 🔹 **Step 3: `invoiceStep`**

* Multi-resource XML reader reads from `/tmp/unzipped`
* Your existing processor & writer
* Upload processed files back to COS or move to archive

---

## ✅ Technical Breakdown

### 1. `fetchEncryptedTasklet`

```java
@Component
public class FetchEncryptedTasklet implements Tasklet {

    private final CosStorageService cosService;

    public FetchEncryptedTasklet(CosStorageService cosService) {
        this.cosService = cosService;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext context) throws Exception {
        List<String> cosKeys = List.of("invoices-batch1.zip.pgp", "invoices-batch2.zip.pgp");

        for (String key : cosKeys) {
            File localFile = cosService.downloadToLocal(key); // saves to /tmp/encrypted
            System.out.println("Fetched: " + localFile.getAbsolutePath());
        }

        return RepeatStatus.FINISHED;
    }
}
```

---

### 2. `decryptAndUnzipTasklet`

```java
@Component
public class DecryptAndUnzipTasklet implements Tasklet {

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext context) throws Exception {
        File[] encryptedFiles = new File("/tmp/encrypted").listFiles((dir, name) -> name.endsWith(".pgp"));
        if (encryptedFiles == null) return RepeatStatus.FINISHED;

        for (File pgpFile : encryptedFiles) {
            File zipFile = decrypt(pgpFile); // simulate decryption
            unzip(zipFile, new File("/tmp/unzipped"));
        }

        return RepeatStatus.FINISHED;
    }

    private File decrypt(File pgp) throws IOException {
        File zip = new File(pgp.getAbsolutePath().replace(".pgp", ""));
        Files.copy(pgp.toPath(), zip.toPath(), StandardCopyOption.REPLACE_EXISTING);
        return zip;
    }

    private void unzip(File zipFile, File destDir) throws IOException {
        destDir.mkdirs();
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File newFile = new File(destDir, entry.getName());
                try (FileOutputStream fos = new FileOutputStream(newFile)) {
                    zis.transferTo(fos);
                }
            }
        }
    }
}
```

---

### 3. `invoiceStep` (already implemented)

```java
@Bean
public Step invoiceStep(JobRepository repo, PlatformTransactionManager tx,
                        InvoiceProcessor proc, InvoiceWriter writer) throws IOException {
    MultiResourceItemReader<InvoiceType> reader = new MultiResourceItemReader<>();
    reader.setResources(new PathMatchingResourcePatternResolver()
        .getResources("file:/tmp/unzipped/*.xml"));
    reader.setDelegate(new SingleInvoiceReader());

    return new StepBuilder("invoiceStep", repo)
            .<InvoiceType, InvoiceType>chunk(1, tx)
            .reader(reader)
            .processor(proc)
            .writer(writer)
            .build();
}
```

---

## ✅ Final Job Configuration

```java
@Bean
public Job invoiceJob(JobRepository repo,
                      Step fetchEncryptedStep,
                      Step decryptAndUnzipStep,
                      Step invoiceStep) {

    return new JobBuilder("invoiceJob", repo)
            .start(fetchEncryptedStep)
            .next(decryptAndUnzipStep)
            .next(invoiceStep)
            .build();
}
```

---

Would you like me to generate all the actual Spring bean definitions for these three steps now?



Perfect — to clean up **all temp files** (ZIPs, PGPs, XMLs, and the unzipped folder), you can add a final **cleanup Tasklet** as **Step 4** in your job.

---

## ✅ Cleanup Tasklet

### 🔹 `TempFileCleanupTasklet.java`

```java
@Component
public class TempFileCleanupTasklet implements Tasklet {

    private static final Path TMP_DIR = Paths.get("/tmp");
    private static final Path UNZIPPED_DIR = TMP_DIR.resolve("unzipped");

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        // Delete *.zip, *.pgp, *.xml from /tmp
        try (Stream<Path> files = Files.list(TMP_DIR)) {
            files.filter(path -> {
                String name = path.getFileName().toString().toLowerCase();
                return name.endsWith(".zip") || name.endsWith(".pgp") || name.endsWith(".xml");
            }).forEach(path -> {
                try {
                    Files.deleteIfExists(path);
                    System.out.println("Deleted: " + path);
                } catch (IOException e) {
                    System.err.println("Failed to delete: " + path + " — " + e.getMessage());
                }
            });
        }

        // Delete all files inside /tmp/unzipped
        if (Files.exists(UNZIPPED_DIR)) {
            Files.walk(UNZIPPED_DIR)
                .sorted(Comparator.reverseOrder()) // delete children before parent
                .map(Path::toFile)
                .forEach(File::delete);
            System.out.println("Cleaned up /tmp/unzipped");
        }

        return RepeatStatus.FINISHED;
    }
}
```

---

## ✅ Register Cleanup Step

### In `BatchConfig.java`:

```java
@Bean
public Step cleanupStep(JobRepository repo, PlatformTransactionManager tx, TempFileCleanupTasklet tasklet) {
    return new StepBuilder("cleanupStep", repo)
            .tasklet(tasklet, tx)
            .build();
}
```

---

## ✅ Update the Job

```java
@Bean
public Job invoiceJob(JobRepository repo,
                      Step fetchEncryptedStep,
                      Step decryptAndUnzipStep,
                      Step invoiceStep,
                      Step cleanupStep) {

    return new JobBuilder("invoiceJob", repo)
            .start(fetchEncryptedStep)
            .next(decryptAndUnzipStep)
            .next(invoiceStep)
            .next(cleanupStep) // ✅ Final cleanup
            .build();
}
```

---

This ensures all temporary files are removed **after successful invoice processing**, keeping your system clean and ready for the next run.

Would you like this step to run conditionally (e.g., only if previous steps succeed)?




private void unzipFile(File zipFile, Path targetDir) throws IOException {
    // Ensure /tmp/unzipped directory exists
    Files.createDirectories(targetDir);

    System.out.println("Unzipping: " + zipFile.getAbsolutePath());
    System.out.println("Target directory: " + targetDir.toAbsolutePath());

    try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            Path resolvedPath = targetDir.resolve(entry.getName()).normalize();

            // Ensure path is not malicious (zip-slip attack)
            if (!resolvedPath.startsWith(targetDir)) {
                throw new IOException("Entry is outside target dir: " + entry.getName());
            }

            if (entry.isDirectory()) {
                Files.createDirectories(resolvedPath);
            } else {
                Files.createDirectories(resolvedPath.getParent()); // ensure parent dir exists
                try (OutputStream out = Files.newOutputStream(resolvedPath)) {
                    zis.transferTo(out);
                }
                System.out.println("Extracted: " + resolvedPath.toAbsolutePath());
            }
        }
    }

    // Confirm directory exists after unzip
    System.out.println("Final check: " + targetDir + " exists? " + Files.exists(targetDir));
}


Perfect — let’s implement **robust, clean exception handling** across your batch job in **4 total steps**.

---

## ✅ Step 1: Create Domain-Specific Exception Classes

You’ve done this ✅. For reference:

```java
public class CosDownloadException extends RuntimeException {
    public CosDownloadException(String message, Throwable cause) {
        super(message, cause);
    }
}

public class DecryptionException extends RuntimeException {
    public DecryptionException(String message, Throwable cause) {
        super(message, cause);
    }
}

public class UnzipException extends RuntimeException {
    public UnzipException(String message, Throwable cause) {
        super(message, cause);
    }
}
```

---

## ✅ Step 2: Update `FetchAndUnzipTasklet` to Use These

Update your tasklet like this:

```java
@Slf4j
@Component
public class FetchAndUnzipTasklet implements Tasklet {

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        log.info("▶️ Fetch and Unzip step started");

        try {
            fetchEncryptedFiles();
        } catch (Exception e) {
            throw new CosDownloadException("Failed to download files from COS", e);
        }

        try {
            decryptAndUnzip();
        } catch (IOException e) {
            throw new UnzipException("Failed during unzip", e);
        } catch (Exception e) {
            throw new DecryptionException("PGP decryption failed", e);
        }

        log.info("✅ Fetch and Unzip step completed");
        return RepeatStatus.FINISHED;
    }

    private void fetchEncryptedFiles() {
        // implement download from COS
    }

    private void decryptAndUnzip() {
        // implement decryption and extraction
    }
}
```

This ensures each stage has clear error classification.

---

## ✅ Step 3: Add a `SkipPolicy` (For Fault Tolerance)

Add this in your `BatchConfiguration.java`:

```java
@Bean
public SkipPolicy customSkipPolicy() {
    return (Throwable t, int skipCount) -> {
        if (t instanceof DecryptionException || t instanceof CosDownloadException) {
            log.error("❌ Critical failure (not skippable): {}", t.getMessage());
            return false;
        }

        if (t instanceof UnzipException) {
            log.warn("⚠️ Skipping bad zip file ({}): {}", skipCount, t.getMessage());
            return skipCount < 3;
        }

        log.warn("⚠️ Skipping generic failure ({}): {}", skipCount, t.getMessage());
        return skipCount < 5;
    };
}
```

Then apply it in your step:

```java
@Bean
public Step invoiceStep(...) {
    return new StepBuilder("invoiceStep", jobRepository)
            .<InvoiceType, InvoiceType>chunk(5, transactionManager)
            .reader(invoiceReader)
            .writer(invoiceWriter)
            .faultTolerant()
            .skipPolicy(customSkipPolicy())
            .build();
}
```

---

## ✅ Step 4: Add a `JobExecutionListener` for Logging Failures

Also in `BatchConfiguration.java`:

```java
@Bean
public JobExecutionListener jobExecutionListener() {
    return new JobExecutionListenerSupport() {
        @Override
        public void afterJob(JobExecution jobExecution) {
            if (jobExecution.getStatus() == BatchStatus.FAILED) {
                log.error("❌ Job failed with the following exceptions:");
                jobExecution.getAllFailureExceptions()
                        .forEach(ex -> log.error(" - {}", ex.toString()));
            } else {
                log.info("✅ Job completed successfully.");
            }
        }
    };
}
```

Add this to your job definition:

```java
@Bean
public Job invoiceJob(...) {
    return new JobBuilder("invoiceJob", jobRepository)
            .start(fetchAndUnzipStep())
            .next(invoiceStep())
            .next(cleanupStep())
            .listener(jobExecutionListener())
            .build();
}
```

---

## ✅ Done!

Now your job has:

* ✨ Clear exception types
* 🔥 Graceful skipping or stopping
* 📜 Log-traceable failure paths
* 🛡️ Better resilience for partial failures

Would you like to also include retry logic with backoff (`@Retryable`) for COS downloads next?


Perfect — if you already have 5–6 invoice `.xml` files and just want to **zip them together** into one `.zip` file, here's a clean Java method to do that.

---

## ✅ Java Method to Zip Existing XML Files

```java
import java.io.*;
import java.nio.file.*;
import java.util.zip.*;

public class ZipUtility {

    public static void zipXmlFiles(Path inputDir, Path outputZipFile) throws IOException {
        if (!Files.exists(inputDir) || !Files.isDirectory(inputDir)) {
            throw new IllegalArgumentException("Input directory does not exist: " + inputDir);
        }

        try (FileOutputStream fos = new FileOutputStream(outputZipFile.toFile());
             ZipOutputStream zipOut = new ZipOutputStream(fos)) {

            Files.list(inputDir)
                 .filter(file -> file.toString().endsWith(".xml"))
                 .forEach(file -> {
                     try (FileInputStream fis = new FileInputStream(file.toFile())) {
                         ZipEntry zipEntry = new ZipEntry(file.getFileName().toString());
                         zipOut.putNextEntry(zipEntry);
                         fis.transferTo(zipOut);
                         zipOut.closeEntry();
                         System.out.println("✔️ Added: " + file.getFileName());
                     } catch (IOException e) {
                         throw new UncheckedIOException("Failed to zip: " + file, e);
                     }
                 });
        }

        System.out.println("✅ ZIP created at: " + outputZipFile);
    }
}
```

---

## ✅ Example Usage:

```java
public class TestZipper {
    public static void main(String[] args) throws IOException {
        Path sourceDir = Paths.get("/your/path/to/xmls");
        Path zipOutput = Paths.get("/your/output/path/invoices.zip");

        ZipUtility.zipXmlFiles(sourceDir, zipOutput);
    }
}
```

---

## 📝 Notes:

* Replace `/your/path/to/xmls` with the actual directory where your XMLs are
* All `.xml` files in that folder will be zipped
* Files are zipped at the **root** level of the ZIP file

---

Let me know if you'd like to:

* Encrypt the ZIP afterward (.pgp)
* Add subfolders inside the ZIP
* Rename entries while zipping


import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.example.batch.exception.InvoiceProcessingException;
import com.example.batch.tasklet.FetchAndUnzipTasklet;
import network.oxalis.peppol.ubl2.jaxb.InvoiceType;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.item.*;
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.batch.item.xml.StaxEventItemReader;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.test.JobLauncherTestUtils;
import org.springframework.batch.test.context.SpringBatchTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class FetchAndUnzipTaskletTest {

    @InjectMocks
    private FetchAndUnzipTasklet tasklet;

    @Mock
    private StepContribution contribution;

    @Mock
    private ChunkContext chunkContext;

    @Test
    void shouldExecuteSuccessfully() throws Exception {
        RepeatStatus result = tasklet.execute(contribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, result);
    }

    @Test
    void shouldThrowInvoiceProcessingExceptionOnIOException() throws Exception {
        FetchAndUnzipTasklet faultyTasklet = new FetchAndUnzipTasklet() {
            @Override
            public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
                throw new InvoiceProcessingException("Simulated failure", new IOException("IO fail"));
            }
        };
        assertThrows(InvoiceProcessingException.class, () ->
                faultyTasklet.execute(contribution, chunkContext));
    }
}

@SpringBootTest
@SpringBatchTest
class InvoiceJobIntegrationTest {

    @Autowired
    private JobLauncherTestUtils jobLauncherTestUtils;

    @Autowired
    private Job invoiceJob;

    @Test
    void shouldExecuteAllStepsInOrder() throws Exception {
        JobExecution execution = jobLauncherTestUtils.launchJob(new JobParameters());
        assertEquals("COMPLETED", execution.getExitStatus().getExitCode());
    }
}

class InvoiceReaderTest {

    @Test
    void shouldInitializeReaderWithResources() throws Exception {
        MultiResourceItemReader<InvoiceType> reader = new MultiResourceItemReader<>();
        reader.setResources(new org.springframework.core.io.Resource[] {
            new FileSystemResource("/tmp/unzipped/sample-invoice.xml")
        });
        reader.setDelegate(new StaxEventItemReader<>());
        reader.afterPropertiesSet();
        assertNotNull(reader);
    }

    @Test
    void multiResourceReaderShouldReadMultipleFiles() throws Exception {
        MultiResourceItemReader<InvoiceType> reader = new MultiResourceItemReader<>();
        File dir = new File("/tmp/unzipped");
        File[] xmlFiles = dir.listFiles((d, name) -> name.endsWith(".xml"));

        assertNotNull(xmlFiles, "Directory should not be null");
        assertTrue(xmlFiles.length > 0, "There should be at least one XML file");

        FileSystemResource[] resources = new FileSystemResource[xmlFiles.length];
        for (int i = 0; i < xmlFiles.length; i++) {
            resources[i] = new FileSystemResource(xmlFiles[i]);
        }

        reader.setResources(resources);
        reader.setDelegate(new StaxEventItemReader<>()); // You may need to configure properly for real parsing
        reader.afterPropertiesSet();
        reader.open(new ExecutionContext());

        int count = 0;
        InvoiceType invoice;
        while ((invoice = reader.read()) != null) {
            assertNotNull(invoice);
            count++;
        }
        reader.close();

        assertTrue(count > 0, "Should read at least one invoice");
    }
}

class InvoiceWriterTest {

    @Test
    void shouldWriteInvoicesToLog() throws Exception {
        ItemWriter<InvoiceType> writer = items -> {
            for (InvoiceType invoice : items) {
                assertNotNull(invoice);
                System.out.println("Writing invoice: " + invoice.getID());
            }
        };
        InvoiceType dummy = new InvoiceType();
        writer.write(Collections.singletonList(dummy));
    }
}

class InvoiceProcessorTest {

    @Test
    void shouldProcessInvoiceCorrectly() throws Exception {
        ItemProcessor<InvoiceType, InvoiceType> processor = item -> {
            assertNotNull(item);
            return item;
        };
        InvoiceType input = new InvoiceType();
        InvoiceType output = processor.process(input);
        assertEquals(input, output);
    }
}

@ExtendWith(MockitoExtension.class)
class JobSchedulerTest {

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private Job invoiceJob;

    @Test
    void shouldTriggerJobExecution() throws Exception {
        when(jobLauncher.run(eq(invoiceJob), any(JobParameters.class)))
            .thenReturn(mock(JobExecution.class));

        JobParameters params = new JobParametersBuilder()
            .addLong("timestamp", System.currentTimeMillis())
            .toJobParameters();

        jobLauncher.run(invoiceJob, params);

        verify(jobLauncher, times(1)).run(eq(invoiceJob), any(JobParameters.class));
    }
}


package com.example.batch.config;

import network.oxalis.peppol.ubl2.jaxb.InvoiceType;
import org.junit.jupiter.api.Test;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class XMLInvoiceBatchConfigurationTest {

    @Autowired
    private Job invoiceJob;

    @Autowired
    private Step invoiceStep;

    @Autowired
    private ItemReader<InvoiceType> invoiceReader;

    @Autowired
    private ItemProcessor<InvoiceType, InvoiceType> invoiceProcessor;

    @Autowired
    private ItemWriter<InvoiceType> invoiceWriter;

    @Test
    void jobShouldBeConfiguredCorrectly() {
        assertNotNull(invoiceJob);
        assertEquals("invoiceJob", invoiceJob.getName());
    }

    @Test
    void stepShouldBeConfiguredCorrectly() {
        assertNotNull(invoiceStep);
        assertEquals("invoiceStep", invoiceStep.getName());
    }

    @Test
    void readerShouldBeAvailable() throws Exception {
        assertNotNull(invoiceReader);
        InvoiceType result = invoiceReader.read(); // null if empty
        assertTrue(result == null || result instanceof InvoiceType);
    }

    @Test
    void processorShouldReturnSameInvoice() throws Exception {
        InvoiceType invoice = new InvoiceType();
        InvoiceType result = invoiceProcessor.process(invoice);
        assertEquals(invoice, result);
    }

    @Test
    void writerShouldHandleSingleInvoice() throws Exception {
        InvoiceType invoice = new InvoiceType();
        assertDoesNotThrow(() -> invoiceWriter.write(List.of(invoice)));
    }
}

Absolutely! Here's the complete and updated `InvoiceWriter` class using **Apache PDFBox** for real PDF generation, alongside XML marshalling.

---

package com.example.batch.writer;

import lombok.extern.slf4j.Slf4j;
import network.oxalis.peppol.ubl2.jaxb.InvoiceType;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.springframework.batch.item.Chunk;
import org.springframework.batch.item.ItemWriter;
import org.springframework.stereotype.Component;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.UUID;

@Slf4j
@Component
public class InvoiceWriter implements ItemWriter<InvoiceType> {

    private final JAXBContext jaxbContext;

    public InvoiceWriter() {
        try {
            this.jaxbContext = JAXBContext.newInstance("network.oxalis.peppol.ubl2.jaxb");
        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize JAXBContext", e);
        }
    }

    @Override
    public void write(Chunk<? extends InvoiceType> invoices) throws Exception {
        Path xmlDir = Path.of("/tmp/processed/xml");
        Path pdfDir = Path.of("/tmp/processed/pdf");
        Files.createDirectories(xmlDir);
        Files.createDirectories(pdfDir);

        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

        for (InvoiceType invoice : invoices) {
            String id = (invoice.getID() != null && invoice.getID().getValue() != null)
                    ? invoice.getID().getValue()
                    : UUID.randomUUID().toString();

            // XML Output
            File xmlOut = xmlDir.resolve("invoice-" + id + ".xml").toFile();
            try (FileOutputStream fos = new FileOutputStream(xmlOut)) {
                QName qName = new QName("urn:oasis:names:specification:ubl:schema:xsd:Invoice-2", "Invoice");
                JAXBElement<InvoiceType> jaxbElement = new JAXBElement<>(qName, InvoiceType.class, invoice);
                marshaller.marshal(jaxbElement, fos);
                log.info("✅ Processed XML written: {}", xmlOut.getAbsolutePath());
            } catch (Exception e) {
                log.error("❌ Failed to write XML for invoice ID {}", id, e);
            }

            // PDF Output
            File pdfOut = pdfDir.resolve("invoice-" + id + ".pdf").toFile();
            try (PDDocument doc = new PDDocument()) {
                PDPage page = new PDPage();
                doc.addPage(page);

                try (PDPageContentStream content = new PDPageContentStream(doc, page)) {
                    content.beginText();
                    content.setFont(PDType1Font.HELVETICA_BOLD, 14);
                    content.setLeading(16f);
                    content.newLineAtOffset(50, 700);

                    content.showText("Invoice ID: " + id);
                    content.newLine();
                    content.showText("Generated on: " + java.time.LocalDate.now());
                    content.endText();
                }

                doc.save(pdfOut);
                log.info("📄 PDF generated: {}", pdfOut.getAbsolutePath());
            } catch (IOException e) {
                log.error("❌ Failed to generate PDF for invoice ID {}", id, e);
            }
        }
    }
}

Perfect — keeping everything in a single tasklet keeps your pipeline lean and easier to manage unless you need more granular failure control.

---

## ✅ Zip + Encrypt + Upload Tasklet (All-in-One)

We’ll now build:

1. **Zips all XML and PDF files** from `/tmp/processed`
2. **Encrypts** the `.zip` using PGP
3. **Uploads** the `.zip.pgp` to IBM COS

---

## ✅ Requirements

### Maven dependencies

```xml
<!-- For PGP encryption -->
<dependency>
  <groupId>org.bouncycastle</groupId>
  <artifactId>bcpg-jdk18on</artifactId>
  <version>1.77</version>
</dependency>
<dependency>
  <groupId>org.bouncycastle</groupId>
  <artifactId>bcprov-jdk18on</artifactId>
  <version>1.77</version>
</dependency>

<!-- Add your IBM COS SDK if not already present -->
<dependency>
  <groupId>com.ibm.cos</groupId>
  <artifactId>ibm-cos-java-sdk</artifactId>
  <version>2.13.0</version>
</dependency>
```

---

## ✅ 1. `PackageAndUploadTasklet.java`

```java
@Slf4j
@Component
public class PackageAndUploadTasklet implements Tasklet {

    private static final Path XML_DIR = Path.of("/tmp/processed/xml");
    private static final Path PDF_DIR = Path.of("/tmp/processed/pdf");
    private static final Path OUTPUT_DIR = Path.of("/tmp/output");
    private static final String ZIP_NAME = "invoices.zip";
    private static final String ENCRYPTED_NAME = ZIP_NAME + ".pgp";

    private final COSService cosService;
    private final PGPEncryptionService pgpEncryptionService;

    public PackageAndUploadTasklet(COSService cosService, PGPEncryptionService pgpEncryptionService) {
        this.cosService = cosService;
        this.pgpEncryptionService = pgpEncryptionService;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        log.info("📦 Starting zip + encrypt + upload process");

        Files.createDirectories(OUTPUT_DIR);

        File zipFile = OUTPUT_DIR.resolve(ZIP_NAME).toFile();
        File encryptedFile = OUTPUT_DIR.resolve(ENCRYPTED_NAME).toFile();

        // Step 1: Zip XML + PDF files
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))) {
            zipDirectory(XML_DIR, zos);
            zipDirectory(PDF_DIR, zos);
        }
        log.info("✅ Created ZIP: {}", zipFile.getAbsolutePath());

        // Step 2: Encrypt
        pgpEncryptionService.encrypt(zipFile, encryptedFile);
        log.info("🔐 Encrypted ZIP: {}", encryptedFile.getAbsolutePath());

        // Step 3: Upload
        String key = "invoices/" + ENCRYPTED_NAME;
        cosService.uploadFileToBucket(key, encryptedFile);
        log.info("☁️ Uploaded to COS: {}", key);

        return RepeatStatus.FINISHED;
    }

    private void zipDirectory(Path dir, ZipOutputStream zos) throws IOException {
        if (!Files.exists(dir)) return;

        Files.walk(dir)
            .filter(Files::isRegularFile)
            .forEach(path -> {
                try (InputStream is = Files.newInputStream(path)) {
                    ZipEntry entry = new ZipEntry(dir.getFileName() + "/" + path.getFileName());
                    zos.putNextEntry(entry);
                    is.transferTo(zos);
                    zos.closeEntry();
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            });
    }
}
```

---

## ✅ 2. `PGPEncryptionService.java` (skeleton)

Let me know if you need help writing the PGP logic with public key encryption. I can provide:

* Full working PGP encryption with BouncyCastle
* Load from `.asc` or `.gpg` public key files

---

## ✅ 3. COSService.java (upload logic)

Assuming this is already implemented:

```java
public void uploadFileToBucket(String key, File file) {
    PutObjectRequest request = new PutObjectRequest("your-bucket-name", key, file);
    cosClient.putObject(request);
}
```

Here's the ✅ full and updated version of your `InvoiceWriter` using:

* `JAXBContext.newInstance("...")`
* A custom `NamespacePrefixMapper` (`UBLNamespacePrefixMapper`)
* Correct `org.glassfish.jaxb.namespacePrefixMapper` property key (for JAXB 4+)
* Apache PDFBox for generating real PDFs

---

### ✅ `InvoiceWriter.java`

```java
package com.example.batch.writer;

import com.example.batch.util.UBLNamespacePrefixMapper;
import lombok.extern.slf4j.Slf4j;
import network.oxalis.peppol.ubl2.jaxb.InvoiceType;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.springframework.batch.item.Chunk;
import org.springframework.batch.item.ItemWriter;
import org.springframework.stereotype.Component;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.UUID;

@Slf4j
@Component
public class InvoiceWriter implements ItemWriter<InvoiceType> {

    private final JAXBContext jaxbContext;

    public InvoiceWriter() {
        try {
            this.jaxbContext = JAXBContext.newInstance("network.oxalis.peppol.ubl2.jaxb");
        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize JAXBContext", e);
        }
    }

    @Override
    public void write(Chunk<? extends InvoiceType> invoices) throws Exception {
        Path xmlDir = Path.of("/tmp/processed/xml");
        Path pdfDir = Path.of("/tmp/processed/pdf");
        Files.createDirectories(xmlDir);
        Files.createDirectories(pdfDir);

        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.setProperty("org.glassfish.jaxb.namespacePrefixMapper", new UBLNamespacePrefixMapper());

        for (InvoiceType invoice : invoices) {
            String id = (invoice.getID() != null && invoice.getID().getValue() != null)
                    ? invoice.getID().getValue()
                    : UUID.randomUUID().toString();

            // Write XML
            File xmlOut = xmlDir.resolve("invoice-" + id + ".xml").toFile();
            try (FileOutputStream fos = new FileOutputStream(xmlOut)) {
                QName qName = new QName("urn:oasis:names:specification:ubl:schema:xsd:Invoice-2", "Invoice");
                JAXBElement<InvoiceType> jaxbElement = new JAXBElement<>(qName, InvoiceType.class, invoice);
                marshaller.marshal(jaxbElement, fos);
                log.info("✅ Processed XML written: {}", xmlOut.getAbsolutePath());
            } catch (Exception e) {
                log.error("❌ Failed to write XML for invoice ID {}", id, e);
            }

            // Write PDF
            File pdfOut = pdfDir.resolve("invoice-" + id + ".pdf").toFile();
            try (PDDocument doc = new PDDocument()) {
                PDPage page = new PDPage();
                doc.addPage(page);

                try (PDPageContentStream content = new PDPageContentStream(doc, page)) {
                    content.beginText();
                    content.setFont(PDType1Font.HELVETICA_BOLD, 14);
                    content.setLeading(16f);
                    content.newLineAtOffset(50, 700);

                    content.showText("Invoice ID: " + id);
                    content.newLine();
                    content.showText("Generated on: " + java.time.LocalDate.now());
                    content.endText();
                }

                doc.save(pdfOut);
                log.info("📄 PDF generated: {}", pdfOut.getAbsolutePath());
            } catch (IOException e) {
                log.error("❌ Failed to generate PDF for invoice ID {}", id, e);
            }
        }
    }
}
```

---

### ✅ `UBLNamespacePrefixMapper.java`

```java
package com.example.batch.util;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;

public class UBLNamespacePrefixMapper extends NamespacePrefixMapper {

    @Override
    public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix) {
        return switch (namespaceUri) {
            case "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" -> "cac";
            case "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" -> "cbc";
            case "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" -> ""; // Default
            default -> suggestion;
        };
    }
}
```

---

Let me know if you'd like:

* Help writing a unit test for this writer
* To generate multiple invoice examples for validation
* Help with ZIP + PGP + COS tests


