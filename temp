Sure! Let's get back to creating **test cases** for your PGP-related code. Since youâ€™re working with **decryption** and **handling of keys**, I'll outline how to structure and write unit tests step by step.

---

### **Test Case Creation Overview**

1. **Classes to Test**:
   - `DecryptingMultiResourceItemReader`
   - `DecryptionUtil`
   - `UnzipUtil`
   - Supporting functionality like key loading.

2. **Focus Areas**:
   - Mocking key files (e.g., private key `.asc` and encrypted `.gpg` files).
   - Validating decryption logic.
   - Handling of exceptions (e.g., invalid keys, incorrect passphrase, or malformed files).

3. **Test Setup**:
   - Use **JUnit 5** and **Mockito** (if mocking dependencies is needed).
   - Place test files (e.g., `private_key.asc`, `encrypted_file.gpg`) in the `src/test/resources` folder.

---

### **1. Test for `DecryptionUtil`**

#### **Code Under Test**: `DecryptionUtil`
This class decrypts encrypted resources and outputs a `Resource`.

#### **Test Case: Decrypting an Encrypted File**

##### **Test Setup**
- Mock the `private_key.asc` and `encrypted_file.gpg`.
- Validate that the decrypted content matches the expected output.

##### **Test Code**
```java
import org.junit.jupiter.api.Test;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import static org.junit.jupiter.api.Assertions.*;

public class DecryptionUtilTest {

    private final DecryptionUtil decryptionUtil;

    public DecryptionUtilTest() throws Exception {
        // Set up the decryptor with the private key
        Decryptor decryptor = new Decryptor(new ClassPathResource("private_key.asc").getInputStream(), "test-passphrase");
        decryptionUtil = new DecryptionUtil(decryptor);
    }

    @Test
    void testDecryptResource() throws Exception {
        // Arrange
        Resource encryptedResource = new ClassPathResource("encrypted_file.gpg");

        // Act
        Resource decryptedResource = decryptionUtil.decryptResource(encryptedResource);

        // Assert
        assertNotNull(decryptedResource, "Decrypted resource should not be null");
        assertTrue(decryptedResource.exists(), "Decrypted resource should exist");

        // Verify decrypted content (if text-based, read the InputStream)
        try (InputStream inputStream = decryptedResource.getInputStream()) {
            String decryptedContent = new String(inputStream.readAllBytes());
            assertEquals("Expected decrypted content here", decryptedContent.trim(), "Decrypted content should match");
        }
    }
}
```

---

### **2. Test for `DecryptingMultiResourceItemReader`**

#### **Code Under Test**: `DecryptingMultiResourceItemReader`
This class reads encrypted resources, decrypts them, and extracts content (e.g., `.csv` files).

#### **Test Case: Read and Process Multiple Encrypted Files**

##### **Test Code**
```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import static org.junit.jupiter.api.Assertions.*;

public class DecryptingMultiResourceItemReaderTest {

    private DecryptingMultiResourceItemReader<String> multiResourceItemReader;
    private DecryptionUtil decryptionUtil;
    private UnzipUtil unzipUtil;

    @BeforeEach
    void setUp() throws Exception {
        // Mock dependencies
        decryptionUtil = Mockito.mock(DecryptionUtil.class);
        unzipUtil = Mockito.mock(UnzipUtil.class);

        // Create the reader
        multiResourceItemReader = new DecryptingMultiResourceItemReader<>(decryptionUtil, unzipUtil);

        // Mock resources
        Resource encryptedFile1 = new ClassPathResource("encrypted_file1.gpg");
        Resource encryptedFile2 = new ClassPathResource("encrypted_file2.gpg");
        multiResourceItemReader.setResources(new Resource[]{encryptedFile1, encryptedFile2});
    }

    @Test
    void testReadDecryptedFiles() throws Exception {
        // Arrange
        Mockito.when(decryptionUtil.decryptResource(Mockito.any(Resource.class)))
                .thenReturn(new ClassPathResource("decrypted_file.csv")); // Mock decrypted file

        Mockito.when(unzipUtil.extractFilesFromZip(Mockito.any(Resource.class)))
                .thenReturn(List.of(new ByteArrayInputStream("test,data".getBytes()))); // Mock unzipped streams

        ExecutionContext executionContext = new ExecutionContext();
        multiResourceItemReader.open(executionContext);

        // Act
        Object item = multiResourceItemReader.read();

        // Assert
        assertNotNull(item, "The reader should return an item");
    }
}
```

---

### **3. Test for `UnzipUtil`**

#### **Code Under Test**: `UnzipUtil`
This class extracts files from a `.zip` resource.

#### **Test Case: Extract Files from ZIP Resource**

##### **Test Code**
```java
import org.junit.jupiter.api.Test;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import java.io.InputStream;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class UnzipUtilTest {

    private final UnzipUtil unzipUtil = new UnzipUtil();

    @Test
    void testExtractFilesFromZip() throws Exception {
        // Arrange
        Resource zipResource = new ClassPathResource("sample.zip");

        // Act
        List<InputStream> extractedFiles = unzipUtil.extractStreamsFromZip(zipResource);

        // Assert
        assertNotNull(extractedFiles, "Extracted files list should not be null");
        assertFalse(extractedFiles.isEmpty(), "Extracted files list should not be empty");
    }
}
```

---

### **4. General Test Setup**

#### **Folder Structure**
Place test resources (keys, encrypted files, ZIP files) in the following location:
```
src/test/resources/
    â”œâ”€â”€ private_key.asc
    â”œâ”€â”€ encrypted_file.gpg
    â”œâ”€â”€ sample.zip
    â”œâ”€â”€ decrypted_file.csv
```

#### **Dependencies**
Ensure you include the required dependencies for testing:
```xml
<dependencies>
    <!-- Spring Test -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>

    <!-- Mockito for mocking -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <scope>test</scope>
    </dependency>

    <!-- Apache Commons IO for InputStream utilities -->
    <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
    </dependency>

    <!-- BouncyCastle for PGP -->
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcprov-jdk15on</artifactId>
        <version>1.70</version>
    </dependency>
</dependencies>
```

---

### **Summary of Test Cases**
- **DecryptionUtil**:
  - Verify decryption works and produces expected content.
- **DecryptingMultiResourceItemReader**:
  - Verify it reads, decrypts, and processes multiple encrypted files.
- **UnzipUtil**:
  - Verify it extracts files from ZIP resources.

Let me know if you need further clarification or adjustments to the test cases! ðŸš€
