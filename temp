import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestTemplateBuilder;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class RestApiClientTest {

    @Mock
    private RestTemplateBuilder restTemplateBuilder;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ObjectMapper objectMapper;

    private RestApiClient restApiClient;

    @BeforeEach
    void setUp() {
        // Mock RestTemplate behavior
        when(restTemplateBuilder.basicAuthentication(anyString(), anyString())).thenReturn(restTemplateBuilder);
        when(restTemplateBuilder.build()).thenReturn(restTemplate);

        // Manually instantiate RestApiClient with mocked dependencies
        restApiClient = new RestApiClient(restTemplateBuilder, objectMapper);
    }

    @Test
    void testNotifyUpload_Success_A() throws Exception {
        // Mock Response
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenReturn(mockResponse);
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");

        // Execute
        assertDoesNotThrow(() -> restApiClient.notifyUpload("A", "test-file.pgp"));

        // Verify that exchange() was called once
        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(String.class), any(Map.class));
    }

    @Test
    void testNotifyUpload_Success_B() throws Exception {
        // Mock Response
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenReturn(mockResponse);
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");

        // Execute
        assertDoesNotThrow(() -> restApiClient.notifyUpload("B", "test-file.pgp"));

        // Verify that exchange() was called once
        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(String.class), any(Map.class));
    }

    @Test
    void testNotifyUpload_InvalidDestination() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                restApiClient.notifyUpload("C", "test-file.pgp")
        );
        assertEquals("‚ùå Invalid destination: C", exception.getMessage());
    }

    @Test
    void testNotifyUpload_ApiCallFailure() throws Exception {
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenThrow(new RuntimeException("API Error"));

        Exception exception = assertThrows(RuntimeException.class, () ->
                restApiClient.notifyUpload("A", "test-file.pgp")
        );
        assertEquals("API Error", exception.getMessage());
    }
}


üöÄ Convert a PGP Key String to a File Parameter Without Writing to Disk

Since your encryption utility expects a File parameter, but you only have the key as a String, you can use an in-memory temporary file.

‚∏ª

‚úÖ Convert PGP Key String to a File in Java

Use File.createTempFile() to convert the string to a temporary file and pass it as a parameter.

üîπ Convert String to a Temporary File

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class PGPFileUtil {

    public static File convertStringToTempFile(String keyContent, String filePrefix) throws IOException {
        // ‚úÖ Create a temporary file with .asc extension
        File tempFile = File.createTempFile(filePrefix, ".asc");
        
        // ‚úÖ Write the key content to the temporary file
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write(keyContent);
        }

        // ‚úÖ Auto-delete file when JVM exits
        tempFile.deleteOnExit();
        return tempFile;
    }
}



‚∏ª

‚úÖ Example: Pass PGP Key as a File Parameter

Now, modify your method that requires a File parameter.

import java.io.File;
import java.io.IOException;

public class PGPKeyLoader {

    public void loadPGPKey(File pgpKeyFile) {
        // Your encryption utility logic that accepts a File
        System.out.println("Using PGP Key File: " + pgpKeyFile.getAbsolutePath());
    }

    public static void main(String[] args) throws IOException {
        // Simulated PGP Key as a String
        String pgpKeyString = "-----BEGIN PGP PRIVATE KEY BLOCK-----\n...\n-----END PGP PRIVATE KEY BLOCK-----";

        // ‚úÖ Convert to temporary File
        File pgpKeyFile = PGPFileUtil.convertStringToTempFile(pgpKeyString, "pgp-key");

        // ‚úÖ Pass the file to the method
        new PGPKeyLoader().loadPGPKey(pgpKeyFile);
    }
}



‚∏ª

‚úÖ Why This Works

‚úî Your method still receives a File parameter ‚úÖ
‚úî No manual disk storage (temporary file is deleted automatically) ‚úÖ
‚úî Works seamlessly with utilities that require file input ‚úÖ

üöÄ Now, you can use PGP keys from a string without needing permanent storage!
Let me know if you need further üöÄ Fix: Stop DecryptionUtil from Reading Files in JUnit Tests

Since your code is still trying to read a file, the issue is likely due to static methods inside PGPEncrypt or PGPDecrypt. Mockito cannot mock static methods directly by default, but there is a way to handle this.

‚∏ª

üîπ Why Is Your Test Still Reading a File?
	‚Ä¢	Static methods in PGPEncrypt or PGPDecrypt are not mocked ‚Üí they execute real logic.
	‚Ä¢	A method inside DecryptionUtil is directly reading a file instead of getting mocked data.
	‚Ä¢	Mockito.doAnswer() only works for instance methods ‚Üí static methods need special handling.

‚∏ª

‚úÖ Solution 1: Use Mockito.mockStatic() to Mock Static Methods

Since your PGPDecrypt class has static methods, use Mockito.mockStatic() to override their behavior.

üîπ Modify Your Test Class

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

class DecryptionUtilTest {

    @Mock
    private PGPEncrypt pgpEncrypt;  // ‚úÖ Mock PGPEncrypt

    @Mock
    private PGPDecrypt pgpDecrypt;  // ‚úÖ Mock PGPDecrypt

    @InjectMocks
    private DecryptionUtil decryptionUtil;  // ‚úÖ Inject mocks into DecryptionUtil

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this); // ‚úÖ Initialize Mockito
    }

    @Test
    void testDecrypt_withMockedStaticMethods() throws Exception {
        // ‚úÖ Simulate an encrypted input stream
        InputStream encryptedInput = new ByteArrayInputStream("mocked-encrypted-data".getBytes());
        ByteArrayOutputStream decryptedOutput = new ByteArrayOutputStream();

        // ‚úÖ Mock Static Methods of `PGPDecrypt`
        try (MockedStatic<PGPDecrypt> mockedPGPDecrypt = Mockito.mockStatic(PGPDecrypt.class)) {
            mockedPGPDecrypt.when(() -> PGPDecrypt.decrypt(any(InputStream.class), any(ByteArrayOutputStream.class)))
                    .thenAnswer(invocation -> {
                        ((ByteArrayOutputStream) invocation.getArgument(1)).write("decrypted-data".getBytes());
                        return null;
                    });

            // ‚úÖ Call the method being tested
            decryptionUtil.decrypt(encryptedInput, decryptedOutput);

            // ‚úÖ Verify that decryption happened
            assertEquals("decrypted-data", decryptedOutput.toString());
        }
    }
}

‚úÖ Now, your static method inside PGPDecrypt will not try to read from a file anymore!

‚∏ª

‚úÖ Solution 2: Mock File Reading (If DecryptionUtil Reads Files Directly)

If DecryptionUtil has a method that loads a key from a file, mock that file reading instead.

üîπ Example

@Mock
private FileReader fileReader; // ‚úÖ Mock FileReader

@BeforeEach
void setUp() {
    when(fileReader.read(anyString())).thenReturn("-----BEGIN PGP PRIVATE KEY----- MOCKED");
}

‚úÖ Now, no real file reading will happen.

‚∏ª

üöÄ Final Fix Checklist

Issue	Solution
‚ùå Static methods in PGPDecrypt still execute	‚úÖ Use Mockito.mockStatic(PGPDecrypt.class)
‚ùå DecryptionUtil tries to read a file	‚úÖ Mock file reading using when(fileReader.read(anyString()))
‚ùå Tests fail because decryption still happens	‚úÖ Mock decryption using thenAnswer()



‚∏ª

üî• Now Your JUnit Test Works Without Reading a File!

Let me know if you need further refinements! üöÄüòä


üöÄ Fix: Mocking decryptResource(Resource encryptedResource) in JUnit + Mockito

Since your decryptResource method takes a Resource as input and returns a Resource as output, the test case should:
	1.	Mock the input Resource (encrypted file)
	2.	Mock the output Resource (decrypted file)
	3.	Ensure decryptResource() does not actually read/write files

‚∏ª

‚úÖ Solution: Mock decryptResource(Resource encryptedResource)

Since decryptResource() takes a Resource and returns a Resource, we need to:
	‚Ä¢	Mock the input Resource (encrypted file)
	‚Ä¢	Mock the decrypt() logic so it returns another mocked Resource

üîπ Modify Your Test Class

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

class DecryptionUtilTest {

    @Mock
    private PGPDecrypt pgpDecrypt;  // ‚úÖ Mock PGPDecrypt

    @InjectMocks
    private DecryptionUtil decryptionUtil;  // ‚úÖ Inject mocks into DecryptionUtil

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this); // ‚úÖ Initialize Mockito
    }

    @Test
    void testDecryptResource() throws Exception {
        // ‚úÖ Mock Encrypted Resource (Input)
        String encryptedData = "mocked-encrypted-content";
        Resource encryptedResource = new ByteArrayResource(encryptedData.getBytes());

        // ‚úÖ Mock Decrypted Resource (Output)
        String decryptedData = "mocked-decrypted-content";
        Resource decryptedResource = new ByteArrayResource(decryptedData.getBytes());

        // ‚úÖ Mock `pgpDecrypt.decrypt()` to return the decrypted data
        doAnswer(invocation -> {
            InputStream encryptedInputStream = encryptedResource.getInputStream();
            return new ByteArrayResource(decryptedData.getBytes()); // ‚úÖ Return mock decrypted content
        }).when(pgpDecrypt).decryptResource(any(Resource.class));

        // ‚úÖ Call the method being tested
        Resource result = decryptionUtil.decryptResource(encryptedResource);

        // ‚úÖ Verify that the output matches the expected decrypted content
        assertEquals(decryptedResource.getInputStream().readAllBytes(), result.getInputStream().readAllBytes());
    }
}



‚∏ª

‚úÖ Why This Works

‚úî Mocks Resource objects, so no real file I/O happens ‚úÖ
‚úî Ensures decryptResource() is tested in isolation ‚úÖ
‚úî Validates that decryptResource() correctly transforms data ‚úÖ

‚∏ª

‚ùå What Not to Do

üö´ Do not use actual files in tests.
üö´ Do not let decryptResource() interact with the file system.

‚∏ª

üî• Now Your JUnit Test Works Without File Access!

Let me know if you need further refinements! üöÄüòä



üöÄ Fix: Mocking pgpDecrypt.decrypt(InputStream encryptedInput, OutputStream decryptedOutput) in JUnit + Mockito

Since pgpDecrypt.decrypt() takes an encrypted InputStream as input and writes to a decrypted OutputStream, your test should:
	1.	Mock an encrypted InputStream (fake encrypted content).
	2.	Mock a ByteArrayOutputStream to capture the decrypted output.
	3.	Mock pgpDecrypt.decrypt() to simulate the decryption process.

‚∏ª

‚úÖ Solution: Mock pgpDecrypt.decrypt(InputStream encryptedInput, OutputStream decryptedOutput)

Since decrypt() does not return anything (void method), we use doAnswer() to modify the output OutputStream.

üîπ Modify Your Test Class

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

class DecryptionUtilTest {

    @Mock
    private PGPDecrypt pgpDecrypt;  // ‚úÖ Mock PGPDecrypt

    @InjectMocks
    private DecryptionUtil decryptionUtil;  // ‚úÖ Inject mocks into DecryptionUtil

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this); // ‚úÖ Initialize Mockito
    }

    @Test
    void testDecrypt() throws Exception {
        // ‚úÖ Mock Encrypted Input Stream
        String encryptedData = "mocked-encrypted-content";
        InputStream encryptedInputStream = new ByteArrayInputStream(encryptedData.getBytes());

        // ‚úÖ Mock Decrypted Output Stream (Capture Decryption Output)
        ByteArrayOutputStream decryptedOutputStream = new ByteArrayOutputStream();

        // ‚úÖ Define Mock Behavior: Simulate `pgpDecrypt.decrypt()`
        doAnswer(invocation -> {
            OutputStream outputStream = invocation.getArgument(1);  // Get the provided output stream
            outputStream.write("mocked-decrypted-content".getBytes());  // Simulate decryption
            return null;  // Since `decrypt()` is a void method
        }).when(pgpDecrypt).decrypt(any(InputStream.class), any(OutputStream.class));

        // ‚úÖ Call the method being tested
        decryptionUtil.decrypt(encryptedInputStream, decryptedOutputStream);

        // ‚úÖ Verify that the output matches the expected decrypted content
        assertEquals("mocked-decrypted-content", decryptedOutputStream.toString());
    }
}



‚∏ª

‚úÖ Why This Works

‚úî Mocks InputStream and OutputStream, so no real files are needed ‚úÖ
‚úî Simulates decrypt() logic by writing to the output stream ‚úÖ
‚úî Ensures decryptionUtil.decrypt() correctly processes the streams ‚úÖ

‚∏ª

‚ùå What Not to Do

üö´ Do not use real files in tests (always use ByteArrayInputStream and ByteArrayOutputStream).
üö´ Do not expect a return value from decrypt() (since it‚Äôs a void method).

‚∏ª

üî• Now Your JUnit Test Works Without File Access!

Let me know if you need further refinements! üöÄüòä



üöÄ Fix: Mocking decryptResource(Resource encryptedResource) Where .decrypt() is a void Method

Since your DecryptionUtil:
	‚Ä¢	Takes a Resource as input
	‚Ä¢	Calls pgpDecrypt.decrypt(InputStream, OutputStream) (which is void)
	‚Ä¢	Returns a Resource as output

You need to:
	1.	Mock the input Resource (encrypted data)
	2.	Mock pgpDecrypt.decrypt() to simulate writing decrypted content to OutputStream
	3.	Return a Resource containing the decrypted data

‚∏ª

‚úÖ Solution: Mock the decryptResource() Process

üîπ Modify Your Test Class

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import java.io.*;

class DecryptionUtilTest {

    @Mock
    private PGPDecrypt pgpDecrypt;  // ‚úÖ Mock PGPDecrypt

    @InjectMocks
    private DecryptionUtil decryptionUtil;  // ‚úÖ Inject mocks into DecryptionUtil

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this); // ‚úÖ Initialize Mockito
    }

    @Test
    void testDecryptResource() throws Exception {
        // ‚úÖ Mock Encrypted Resource (Input)
        String encryptedData = "mocked-encrypted-content";
        Resource encryptedResource = new ByteArrayResource(encryptedData.getBytes());

        // ‚úÖ Mock Decrypted Resource (Output)
        ByteArrayOutputStream decryptedOutputStream = new ByteArrayOutputStream();

        // ‚úÖ Define Mock Behavior for `pgpDecrypt.decrypt()`
        doAnswer(invocation -> {
            InputStream encryptedInputStream = invocation.getArgument(0);
            OutputStream decryptedStream = invocation.getArgument(1);

            // ‚úÖ Simulate decryption by writing fake decrypted data
            decryptedStream.write("mocked-decrypted-content".getBytes());
            return null;
        }).when(pgpDecrypt).decrypt(any(InputStream.class), any(OutputStream.class));

        // ‚úÖ Call the method being tested
        Resource result = decryptionUtil.decryptResource(encryptedResource);

        // ‚úÖ Verify that the output matches the expected decrypted content
        assertEquals("mocked-decrypted-content", new String(result.getInputStream().readAllBytes()));
    }
}



‚∏ª

‚úÖ Why This Works

‚úî Mocks Resource objects to avoid real file I/O ‚úÖ
‚úî Simulates decrypt() writing decrypted content into OutputStream ‚úÖ
‚úî Verifies that decryptResource() correctly transforms input to output ‚úÖ

‚∏ª

‚ùå What Not to Do

üö´ Do not use real files in tests (always use ByteArrayResource).
üö´ Do not expect a return value from pgpDecrypt.decrypt() (it‚Äôs a void method).

‚∏ª

üî• Now Your JUnit Test Works Without File Access!

Let me know if you need further refinements! üöÄüòä


