@Test
void shouldGetBucketContent() {
    // Arrange
    ObjectListing listing = mock(ObjectListing.class);
    S3ObjectSummary summary = new S3ObjectSummary();
    summary.setKey("data.csv");
    summary.setSize(100);
    when(listing.getObjectSummaries()).thenReturn(List.of(summary));

    when(s3Client.listObjects(any(ListObjectsRequest.class))).thenReturn(listing);

    // Mock the S3Object returned by getObject
    S3Object s3Object = new S3Object();
    s3Object.setObjectContent(new ByteArrayInputStream("mock-content".getBytes()));
    ObjectMetadata metadata = new ObjectMetadata();
    metadata.setContentType("text/csv");
    metadata.setContentLength(100);
    s3Object.setObjectMetadata(metadata);

    when(s3Client.getObject(eq(bucketName), anyString())).thenReturn(s3Object);

    // Act
    List<FileS3> result = cosStorageService.getBucketContent();

    // Assert
    assertThat(result).isNotEmpty();
    FileS3 fileS3 = result.get(0);
    assertThat(fileS3.getKey()).isEqualTo("data.csv");
    assertThat(fileS3.getContentLength()).isEqualTo(100L);
    assertThat(fileS3.getContentType()).isEqualTo("text/csv");

    // Verify interaction
    verify(s3Client).getObject(eq(bucketName), contains("data.csv"));
}
