@Test
void zip_contains_all_regular_files_from_directory() throws Exception {
    // Arrange
    StepExecution se = newStepExecutionWithFlag(false);
    tasklet.beforeStep(se);

    // Only XML dir has files (so we produce exactly one archive)
    touch(XML_DIR, "a.xml", "<a/>");
    touch(XML_DIR, "b.xml", "<b/>");

    // IMPORTANT: our stub copies input zip bytes to the .pgp file,
    // so we can open the .pgp as a zip.
    stubEncryptWritesOutput();

    // Act
    tasklet.execute(new StepContribution(se), new ChunkContext(new StepContext(se)));

    // Find the produced .zip.pgp in OUTPUT_DIR
    Path pgpZip = Files.list(OUTPUT_DIR)
            .filter(p -> p.getFileName().toString().endsWith(".zip.pgp"))
            .findFirst()
            .orElseThrow(() -> new AssertionError("Expected a .zip.pgp in OUTPUT_DIR"));

    // Assert entries INSIDE the .pgp file (really a zip stream due to the stub)
    var names = new ArrayList<String>();
    try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(pgpZip))) {
        for (ZipEntry e; (e = zis.getNextEntry()) != null; ) {
            names.add(e.getName());
        }
    }
    assertTrue(names.contains("a.xml"), "archive should contain a.xml");
    assertTrue(names.contains("b.xml"), "archive should contain b.xml");

    // Optional: verify a single upload happened (XML only)
    verify(cosStorageService, times(1))
            .uploadFile(argThat(k -> KEY_PATTERN.matcher(k).matches()), any(File.class));
}
