package com.bnpp.pf.einvoice.connect.batch.tasklet;

import com.bnpp.pf.einvoice.connect.exception.InvoiceProcessingException;
import com.bnpp.pf.einvoice.connect.config.SchedulerConfig;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.*;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobRestartException;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class InvoiceJobSchedulerTest {

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private Job xmlInvoiceJob;

    @Mock
    private Job csvInvoiceJob;

    @Mock
    private SchedulerConfig schedulerConfig;

    @InjectMocks
    private InvoiceJobScheduler scheduler;

    // ✅ Test XML job scheduled method
    @Test
    void shouldRunXmlInvoiceJob() throws Exception {
        when(jobLauncher.run(eq(xmlInvoiceJob), any(JobParameters.class)))
                .thenReturn(mock(JobExecution.class));

        scheduler.xmlInvoiceJobScheduler();

        verify(jobLauncher, times(1)).run(eq(xmlInvoiceJob), any(JobParameters.class));
    }

    // ✅ Test CSV job scheduled method
    @Test
    void shouldRunCsvInvoiceJob() throws Exception {
        when(jobLauncher.run(eq(csvInvoiceJob), any(JobParameters.class)))
                .thenReturn(mock(JobExecution.class));

        scheduler.csvInvoiceJobScheduler();

        verify(jobLauncher, times(1)).run(eq(csvInvoiceJob), any(JobParameters.class));
    }

    // ✅ Test runJob() error handling for duplicate job (exception)
    @Test
    void shouldThrowInvoiceProcessingExceptionWhenJobAlreadyRunning() throws Exception {
        when(jobLauncher.run(any(Job.class), any(JobParameters.class)))
                .thenThrow(new JobExecutionAlreadyRunningException("Already running"));

        try {
            scheduler.runJob(xmlInvoiceJob, "xmlInvoiceJob");
        } catch (InvoiceProcessingException e) {
            assert e.getMessage().contains("Failed to launch invoiceJob");
        }

        verify(jobLauncher, times(1)).run(any(Job.class), any(JobParameters.class));
    }

    // ✅ Test runJob() with CSV jobName branch (ensures jobType = csv)
    @Test
    void shouldSetJobTypeCsv() throws Exception {
        when(jobLauncher.run(eq(csvInvoiceJob), any(JobParameters.class)))
                .thenReturn(mock(JobExecution.class));

        scheduler.runJob(csvInvoiceJob, "csvInvoiceJob");

        verify(jobLauncher, times(1)).run(eq(csvInvoiceJob), any(JobParameters.class));
    }
}
