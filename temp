Perfect ‚Äî here's a focused approach for **unit testing only the `PdfInvoiceReader` and `PdfInvoiceWriter`** using a sample PDF file.

---

## ‚úÖ 1. Test Setup

### üìÅ Directory Structure

```
src
 ‚îî‚îÄ test
     ‚îî‚îÄ resources
         ‚îú‚îÄ input-pdf/
         ‚îÇ   ‚îî‚îÄ sample-invoice.pdf
         ‚îî‚îÄ output-pdf/
```

---

## ‚úÖ 2. `PdfInvoiceReaderTest.java`

```java
@ExtendWith(SpringExtension.class)
class PdfInvoiceReaderTest {

    private PdfInvoiceReader reader;

    @BeforeEach
    void setup() {
        reader = new PdfInvoiceReader();

        // Simulate job parameter injection
        reader.setInputDirectory("src/test/resources/input-pdf");
    }

    @Test
    void shouldReadPdfFileFromInputDirectory() {
        File file = reader.read();
        assertNotNull(file);
        assertTrue(file.getName().endsWith(".pdf"));
        assertEquals("sample-invoice.pdf", file.getName());
    }
}
```

---

## ‚úÖ 3. `PdfInvoiceWriterTest.java`

```java
@ExtendWith(SpringExtension.class)
class PdfInvoiceWriterTest {

    private PdfInvoiceWriter writer;
    private Path outputDir;

    @BeforeEach
    void setup() throws IOException {
        outputDir = Path.of("src/test/resources/output-pdf");
        Files.createDirectories(outputDir);
        writer = new PdfInvoiceWriter(outputDir);
    }

    @Test
    void shouldWritePdfToOutputDirectory() throws Exception {
        File input = new File("src/test/resources/input-pdf/sample-invoice.pdf");
        assertTrue(input.exists(), "Sample PDF should exist");

        writer.write(new Chunk<>(List.of(input)));

        File written = outputDir.resolve(input.getName()).toFile();
        assertTrue(written.exists(), "Written file should exist");
    }

    @AfterEach
    void cleanup() throws IOException {
        Files.walk(outputDir)
             .filter(Files::isRegularFile)
             .forEach(f -> f.toFile().delete());
    }
}
```

---

## ‚úÖ 4. PdfInvoiceWriter Constructor

Update your `PdfInvoiceWriter` class to allow path injection for testing:

```java
@Slf4j
public class PdfInvoiceWriter implements ItemWriter<File> {

    private final Path outputDir;

    public PdfInvoiceWriter(Path outputDir) {
        this.outputDir = outputDir;
    }

    @Override
    public void write(Chunk<? extends File> items) throws Exception {
        Files.createDirectories(outputDir);
        for (File file : items) {
            Path target = outputDir.resolve(file.getName());
            Files.copy(file.toPath(), target, StandardCopyOption.REPLACE_EXISTING);
            log.info("‚úÖ Copied PDF: {}", target);
        }
    }
}
```

---

‚úÖ This setup:

* Reads a real PDF from `src/test/resources/input-pdf`
* Copies it to `output-pdf`
* Verifies correctness and cleanliness

Let me know if you want to include PDF **content validation** too (e.g. with PDFBox).
