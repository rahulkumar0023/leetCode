Great — a `Tasklet` is the perfect fit when you want to perform **imperative, single-purpose logic**, like fetching, decrypting, and unzipping files in sequence. Here's how you can structure it:

---

## ✅ Plan

Create a `DecryptAndUnzipTasklet` that:

1. Calls `cosService.fetchEncryptedFiles()` → returns `List<File>`
2. Decrypts each `.zip.pgp` file → returns decrypted `.zip` files
3. Unzips each `.zip` file into `/tmp/unzipped/` or another working directory

---

## ✅ 1. `CosStorageService.java` (simplified)

```java
@Component
public class CosStorageService {

    public List<File> fetchEncryptedFiles() {
        // Simulate fetching encrypted files from COS to /tmp
        return List.of(new File("/tmp/invoice-batch-1.zip.pgp"));
    }
}
```

---

## ✅ 2. `DecryptAndUnzipTasklet.java`

```java
@Component
public class DecryptAndUnzipTasklet implements Tasklet {

    private final CosStorageService cosService;

    public DecryptAndUnzipTasklet(CosStorageService cosService) {
        this.cosService = cosService;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        List<File> encryptedFiles = cosService.fetchEncryptedFiles();
        for (File encrypted : encryptedFiles) {
            File decryptedZip = decryptFile(encrypted);
            unzipFile(decryptedZip, Paths.get("/tmp/unzipped"));
        }
        return RepeatStatus.FINISHED;
    }

    private File decryptFile(File encryptedFile) throws IOException {
        // Simulated decryption: just rename file (in real life, use BouncyCastle, etc.)
        File decrypted = new File(encryptedFile.getAbsolutePath().replace(".pgp", ""));
        Files.copy(encryptedFile.toPath(), decrypted.toPath(), StandardCopyOption.REPLACE_EXISTING);
        System.out.println("Decrypted: " + decrypted.getName());
        return decrypted;
    }

    private void unzipFile(File zipFile, Path targetDir) throws IOException {
        targetDir.toFile().mkdirs();
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File outFile = targetDir.resolve(entry.getName()).toFile();
                try (FileOutputStream fos = new FileOutputStream(outFile)) {
                    zis.transferTo(fos);
                }
                System.out.println("Extracted: " + outFile.getName());
            }
        }
    }
}
```

---

## ✅ 3. Add to Your Batch Config

```java
@Bean
public Step decryptUnzipStep(JobRepository repo, PlatformTransactionManager tx,
                              DecryptAndUnzipTasklet tasklet) {
    return new StepBuilder("decryptUnzipStep", repo)
            .tasklet(tasklet, tx)
            .build();
}
```

Then chain it before your invoice step in the job:

```java
@Bean
public Job invoiceJob(JobRepository repo, Step decryptUnzipStep, Step invoiceStep) {
    return new JobBuilder("invoiceJob", repo)
            .start(decryptUnzipStep)
            .next(invoiceStep)
            .build();
}
```

---

## ✅ Result

Your batch job now:

1. **Fetches** `.zip.pgp` files from COS
2. **Decrypts** them to `.zip`
3. **Unzips** them into `/tmp/unzipped`
4. **Then Step 2** reads & processes each XML invoice

---

Would you like a test tasklet runner or unit tests for this setup?
