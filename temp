awesome—here are focused JUnit 5 tests for your SplitPDFMover class.
They exercise all branches:
	•	no source dir / file → skip
	•	case-insensitive match → copy & ensure target dir created
	•	destination collision → unique name -2.pdf
	•	I/O error path (target is a file) → caught, no throw

Package names mirror what you showed; adjust if yours differs (e.g., ...batch.pdf).

package com.bnpp.pf.einvoice.connect.batch.pdf;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatNoException;

class SplitPDFMoverTest {

  private final SplitPDFMover mover = new SplitPDFMover();

  private static final Path SOURCE_DIR = Path.of("/tmp/unzipped/xml/");

  @Test
  void skip_whenNoPdfFound_doesNotCreateTarget(@TempDir Path tmp) throws Exception {
    // ensure source dir exists but file does NOT
    if (Files.exists(SOURCE_DIR)) {
      // leave it as-is, we won't create the file we look for
    } else {
      // also valid: non-existent source dir → code must still skip
      // do nothing
    }

    Path target = tmp.resolve("out"); // this does not exist yet
    mover.movePDF("NOT-THERE", target);

    assertThat(Files.exists(target)).isFalse();  // not created because nothing moved
  }

  @Test
  void moves_caseInsensitive_andCreatesTargetDir(@TempDir Path tmp) throws Exception {
    Files.createDirectories(SOURCE_DIR);
    // Create a source file with different case than the invoiceId argument
    Path src = SOURCE_DIR.resolve("inv-100.PDF");
    byte[] payload = "file-A".getBytes();
    Files.write(src, payload, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

    Path outDir = tmp.resolve("moved");
    mover.movePDF("INV-100", outDir);

    // target dir created
    assertThat(Files.isDirectory(outDir)).isTrue();

    // file copied (keeps original source filename casing for the first copy)
    Path copied = outDir.resolve("inv-100.PDF");
    assertThat(Files.exists(copied)).isTrue();
    assertThat(Files.readAllBytes(copied)).isEqualTo(payload);
  }

  @Test
  void whenDestinationExists_createsUniqueDash2Name(@TempDir Path tmp) throws Exception {
    Files.createDirectories(SOURCE_DIR);

    // Existing file in destination with same base name
    Path outDir = tmp.resolve("dest");
    Files.createDirectories(outDir);
    Path existing = outDir.resolve("inv-100.PDF");
    Files.write(existing, "EXISTING".getBytes(), StandardOpenOption.CREATE);

    // New source to move (same logical name but any case)
    Path src = SOURCE_DIR.resolve("inv-100.PDF");
    byte[] newPayload = "NEW_CONTENT".getBytes();
    Files.write(src, newPayload, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

    mover.movePDF("INV-100", outDir);

    // The mover should keep the original file and write the new one as "-2.pdf"
    Path alt = outDir.resolve("inv-100-2.pdf"); // extension becomes lower-case per implementation
    assertThat(Files.exists(existing)).isTrue();
    assertThat(Files.exists(alt)).isTrue();
    assertThat(Files.readAllBytes(alt)).isEqualTo(newPayload);
  }

  @Test
  void ioError_isCaught_noThrow(@TempDir Path tmp) throws Exception {
    Files.createDirectories(SOURCE_DIR);

    // Valid source file
    Path src = SOURCE_DIR.resolve("inv-200.PDF");
    Files.write(src, "X".getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

    // Make "targetDir" a FILE so createDirectories(...) inside movePDF throws IOException
    Path targetAsFile = tmp.resolve("not-a-dir");
    Files.write(targetAsFile, "blocking".getBytes());

    assertThatNoException().isThrownBy(() -> mover.movePDF("INV-200", targetAsFile));
    // nothing else to assert—method logs and swallows the exception by design
  }
}

why these hit your branches
	•	movePDF:
	•	found == null (no file / no dir) → early return.
	•	Files.isRegularFile(found) true → proceeds to createDirectories + uniqueIfExists + copy.
	•	uniqueIfExists path when exists=false and exists=true (loops to -2.pdf).
	•	catch(IOException) covered by “target is a file” test.
	•	findCaseInsensitive:
	•	directory missing / null → returns null.
	•	directory present → stream/filters/equalsIgnoreCase positive path.

Drop this file under:

src/test/java/com/bnpp/pf/einvoice/connect/batch/pdf/SplitPDFMoverTest.java

Run your suite—this class should jump well into the green and nudge overall coverage up. Want me to add tests for the PDF reader or the XML writer next?
