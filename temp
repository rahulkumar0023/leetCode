package com.example.soapclient.config;

import com.example.soapclient.wsdl.MyRequest;
import com.example.soapclient.wsdl.MyResponse;
import org.apache.hc.client5.http.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContexts;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import org.springframework.stereotype.Service;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.support.interceptor.ClientInterceptor;
import org.springframework.ws.client.support.interceptor.LoggingClientInterceptor;
import org.springframework.ws.transport.WebServiceMessageSender;
import org.springframework.ws.transport.http.HttpComponentsConnection;
import org.springframework.ws.transport.http.HttpComponentsMessageSender;

import javax.annotation.PostConstruct;
import javax.net.ssl.SSLContext;
import java.io.InputStream;
import java.security.KeyStore;

@Configuration
public class SoapClientConfig {

    @Value("${soap.client.keystore.path}")
    private Resource keyStore;

    @Value("${soap.client.keystore.password}")
    private String keyStorePassword;

    @Value("${soap.client.truststore.path}")
    private Resource trustStore;

    @Value("${soap.client.truststore.password}")
    private String trustStorePassword;

    @Value("${soap.client.default-uri}")
    private String defaultUri;

    @Bean
    public WebServiceTemplate webServiceTemplate(Jaxb2Marshaller marshaller) throws Exception {
        WebServiceTemplate template = new WebServiceTemplate(marshaller);
        template.setDefaultUri(defaultUri);
        template.setInterceptors(new ClientInterceptor[]{loggingInterceptor()});
        template.setMessageSender(httpClient5MessageSender());
        return template;
    }

    @Bean
    public Jaxb2Marshaller marshaller() {
        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
        marshaller.setContextPath("com.example.soapclient.wsdl");
        return marshaller;
    }

    @Bean
    public LoggingClientInterceptor loggingInterceptor() {
        LoggingClientInterceptor interceptor = new LoggingClientInterceptor();
        interceptor.setLogRequest(true);
        interceptor.setLogResponse(true);
        interceptor.setLogMessages(true);
        return interceptor;
    }

    @Bean
    public WebServiceMessageSender httpClient5MessageSender() throws Exception {
        KeyStore clientStore = KeyStore.getInstance(KeyStore.getDefaultType());
        try (InputStream ksStream = keyStore.getInputStream()) {
            clientStore.load(ksStream, keyStorePassword.toCharArray());
        }

        KeyStore trustStoreInstance = KeyStore.getInstance(KeyStore.getDefaultType());
        try (InputStream tsStream = trustStore.getInputStream()) {
            trustStoreInstance.load(tsStream, trustStorePassword.toCharArray());
        }

        SSLContext sslContext = SSLContexts.custom()
                .loadKeyMaterial(clientStore, keyStorePassword.toCharArray())
                .loadTrustMaterial(trustStoreInstance, null)
                .build();

        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLContext(sslContext)
                .build();

        return new HttpComponentsMessageSender(httpClient);
    }
}

@Service
class SoapClient {

    private final WebServiceTemplate webServiceTemplate;

    public SoapClient(WebServiceTemplate webServiceTemplate) {
        this.webServiceTemplate = webServiceTemplate;
    }

    public MyResponse callSoapService(MyRequest request) {
        return (MyResponse) webServiceTemplate.marshalSendAndReceive(request);
    }

    @PostConstruct
    public void testConnection() {
        try {
            webServiceTemplate.afterPropertiesSet();
            webServiceTemplate.sendAndReceive(message -> {
                // Intentionally empty request for connection check
            }, messageContext -> {
                System.out.println("Connection to SOAP service validated successfully.");
                return true;
            });
        } catch (Exception ex) {
            System.err.println("SOAP test connection failed: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}
