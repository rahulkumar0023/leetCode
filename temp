package com.example.batch;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.batch.item.json.JacksonJsonObjectReader;
import org.springframework.batch.item.json.JsonItemReader;
import org.springframework.batch.item.json.builder.JsonItemReaderBuilder;
import org.springframework.core.io.Resource;

public class ValidatedJsonItemReader<T> extends JsonItemReader<T> {

    // Hold our Jackson JSON object reader for access.
    private JacksonJsonObjectReader<T> jsonObjectReader;
    // Store the resource (if not already available via the superclass).
    private Resource resource;

    public ValidatedJsonItemReader(Resource resource, Class<T> type) {
        JacksonJsonObjectReader<T> reader = new JacksonJsonObjectReader<>(type);
        reader.setMapper(new ObjectMapper());
        this.jsonObjectReader = reader;
        this.resource = resource;
        // Build the delegate reader.
        JsonItemReader<T> delegate = new JsonItemReaderBuilder<T>()
                .name("validatedJsonItemReader")
                .resource(resource)
                .jsonObjectReader(reader)
                .build();
        // Set up this instance using the delegate properties.
        this.setName(delegate.getName());
        this.setResource(resource);
        // (Optionally, you could delegate read() calls to the delegate here.)
    }

    // Custom getter for the JacksonJsonObjectReader.
    public JacksonJsonObjectReader<T> getJsonObjectReader() {
        return this.jsonObjectReader;
    }

    // Custom getter for resource. If the superclass doesn't expose it, store it as above.
    @Override
    public Resource getResource() {
        return this.resource;
    }

    @Override
    public void open(ExecutionContext executionContext) throws ItemStreamException {
        super.open(executionContext);
        if (this.jsonObjectReader == null || this.jsonObjectReader.getJsonParser() == null) {
            throw new ItemStreamException("JsonParser is null in ValidatedJsonItemReader.open() for resource: " + getResource());
        }
        System.out.println("ValidatedJsonItemReader opened for resource: " + getResource());
    }

    @Override
    public T read() throws Exception {
        if (this.jsonObjectReader == null || this.jsonObjectReader.getJsonParser() == null) {
            throw new ItemStreamException("JsonParser is null in ValidatedJsonItemReader.read() for resource: " + getResource());
        }
        T item = super.read();
        if (item == null) {
            System.out.println("Reached end of JSON file for resource: " + getResource());
        }
        return item;
    }
}
