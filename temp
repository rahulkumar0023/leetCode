// replaces: zipsEncryptsUploads_XML_and_PDF_when_hasCsv_false_and_notifies_cft
@Test
void uploads_XML_when_hasCsv_false_and_notifies_cft() throws Exception {
    // Arrange
    StepExecution se = newStepExecutionWithFlag(false);
    tasklet.beforeStep(se);

    // Only XML dir has files
    touch(XML_DIR, "miles.xml", "<a/>");
    touch(XML_DIR, "finance.xml", "<b/>");

    stubEncryptWritesOutput();

    // Act
    RepeatStatus status = tasklet.execute(new StepContribution(se), new ChunkContext(new StepContext(se)));

    // Assert
    assertEquals(RepeatStatus.FINISHED, status);

    // Exactly one upload (XML)
    verify(cosStorageService, times(1))
            .uploadFile(argThat(k -> KEY_PATTERN.matcher(k).matches()), any(File.class));

    // CFT notify once as well (flag enabled in @BeforeEach)
    verify(cftApiClient, times(1))
            .notifyUpload(argThat(k -> KEY_PATTERN.matcher(k).matches()), endsWith(".pgp"));

    // Sanity: .pgp artifact exists in OUTPUT_DIR
    long pgpCount;
    try (var s = Files.walk(OUTPUT_DIR)) {
        pgpCount = s.filter(p -> p.getFileName().toString().endsWith(".pgp")).count();
    }
    assertTrue(pgpCount >= 1, "expected at least one .pgp artifact");
}

@Test
void uploads_PDF_when_hasCsv_false_and_notifies_cft() throws Exception {
    // Arrange
    StepExecution se = newStepExecutionWithFlag(false);
    tasklet.beforeStep(se);

    // Only PDF dir has files
    touch(PDF_DIR, "doc.pdf", "%PDF-1.4");

    stubEncryptWritesOutput();

    // Act
    RepeatStatus status = tasklet.execute(new StepContribution(se), new ChunkContext(new StepContext(se)));

    // Assert
    assertEquals(RepeatStatus.FINISHED, status);

    verify(cosStorageService, times(1))
            .uploadFile(argThat(k -> KEY_PATTERN.matcher(k).matches()), any(File.class));
    verify(cftApiClient, times(1))
            .notifyUpload(argThat(k -> KEY_PATTERN.matcher(k).matches()), endsWith(".pgp"));

    // At least one .pgp emitted
    long pgpCount;
    try (var s = Files.walk(OUTPUT_DIR)) {
        pgpCount = s.filter(p -> p.getFileName().toString().endsWith(".pgp")).count();
    }
    assertTrue(pgpCount >= 1, "expected at least one .pgp artifact");
}
