package com.example.batch.util;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;

public class UBLNamespacePrefixMapper extends NamespacePrefixMapper {

    @Override
    public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix) {
        return switch (namespaceUri) {
            case "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" -> "cac";
            case "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" -> "cbc";
            case "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" -> ""; // Default namespace
            default -> suggestion; // fallback
        };
    }
}

```

---

## âœ… 2. `InvoiceWriterTest.java`

```java
package com.example.batch.writer;

import network.oxalis.peppol.ubl2.jaxb.IDType;
import network.oxalis.peppol.ubl2.jaxb.InvoiceType;
import org.junit.jupiter.api.*;
import org.springframework.batch.item.Chunk;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class InvoiceWriterTest {

    private Path xmlDir;
    private Path pdfDir;
    private InvoiceWriter writer;

    @BeforeEach
    void setup() throws Exception {
        xmlDir = Files.createTempDirectory("test-xml");
        pdfDir = Files.createTempDirectory("test-pdf");
        writer = new InvoiceWriter(xmlDir, pdfDir);
    }

    @AfterEach
    void cleanup() throws Exception {
        Files.walk(xmlDir).map(Path::toFile).forEach(File::delete);
        Files.walk(pdfDir).map(Path::toFile).forEach(File::delete);
    }

    @Test
    void shouldGenerateXmlAndPdfFiles() throws Exception {
        InvoiceType invoice = new InvoiceType();
        IDType id = new IDType();
        id.setValue("TEST-123");
        invoice.setID(id);

        writer.write(new Chunk<>(List.of(invoice)));

        Path expectedXml = xmlDir.resolve("invoice-TEST-123.xml");
        Path expectedPdf = pdfDir.resolve("invoice-TEST-123.pdf");

        assertTrue(Files.exists(expectedXml), "XML file should exist");
        assertTrue(Files.exists(expectedPdf), "PDF file should exist");
    }
}
```

---

### ðŸ”§ Add this to `application.yml` (optional):

```yaml
invoice:
  output:
    xml-dir: /tmp/processed/xml
    pdf-dir: /tmp/processed/pdf
```

---

Would you like to assert **XML contents** too in the tests? I can help with that next.
