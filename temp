Sure! Below is the full **step-by-step implementation** to read `.zip.pgp` files from a COS bucket, decrypt and unzip them, and process the resulting CSV files using **Spring Batch**. This includes all the key components with minimal changes for clarity.

---

### **Step 1: Fetch `.zip.pgp` Files from COS Bucket**

Create a service to fetch files from the COS bucket using the AWS S3 SDK. Each file is returned as a Spring `Resource`.

```java
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.util.ArrayList;
import java.util.List;

public class CosService {

    private final AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();

    public Resource[] fetchEncryptedFiles(String bucketName, String prefix) {
        List<Resource> resources = new ArrayList<>();

        // List files in the COS bucket
        List<S3ObjectSummary> summaries = s3Client.listObjects(bucketName, prefix).getObjectSummaries();
        for (S3ObjectSummary summary : summaries) {
            S3Object s3Object = s3Client.getObject(bucketName, summary.getKey());
            resources.add(new InputStreamResource(s3Object.getObjectContent()));
        }

        return resources.toArray(new Resource[0]);
    }
}
```

---

### **Step 2: Decrypt `.pgp` Files**

Use the `Decryptor` utility to decrypt `.pgp` files. The decrypted data is returned as a `Resource`.

```java
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class DecryptionUtil {

    private final Decryptor decryptor;

    public DecryptionUtil(Decryptor decryptor) {
        this.decryptor = decryptor;
    }

    public Resource decryptResource(Resource encryptedResource) throws Exception {
        InputStream encryptedStream = encryptedResource.getInputStream();

        // Decrypt to a ByteArrayOutputStream
        ByteArrayOutputStream decryptedOutputStream = new ByteArrayOutputStream();
        decryptor.decrypt(encryptedStream, decryptedOutputStream);

        // Convert the decrypted output to a Resource
        return new InputStreamResource(new ByteArrayInputStream(decryptedOutputStream.toByteArray()));
    }
}
```

---

### **Step 3: Unzip `.zip` Files**

Extract the CSV files from the `.zip` files. This utility supports extracting all files in the archive.

```java
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.springframework.core.io.Resource;

public class UnzipUtil {

    public List<InputStream> extractCsvFromZip(Resource decryptedResource) throws Exception {
        List<InputStream> csvStreams = new ArrayList<>();
        ZipInputStream zis = new ZipInputStream(decryptedResource.getInputStream());
        ZipEntry entry;

        while ((entry = zis.getNextEntry()) != null) {
            if (!entry.isDirectory() && entry.getName().endsWith(".csv")) {
                // Store each CSV as an InputStream
                csvStreams.add(new BufferedInputStream(zis));
            }
        }
        return csvStreams;
    }
}
```

---

### **Step 4: Custom MultiResource Item Reader**

This reader handles decryption, unzipping, and processing of all CSVs dynamically.

```java
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class DecryptingMultiResourceItemReader<T> extends MultiResourceItemReader<T> {

    private final DecryptionUtil decryptionUtil;
    private final UnzipUtil unzipUtil;

    public DecryptingMultiResourceItemReader(DecryptionUtil decryptionUtil, UnzipUtil unzipUtil) {
        this.decryptionUtil = decryptionUtil;
        this.unzipUtil = unzipUtil;
    }

    public void setEncryptedResources(Resource[] encryptedResources) {
        List<Resource> decryptedCsvResources = new ArrayList<>();
        for (Resource encryptedResource : encryptedResources) {
            try {
                // Decrypt the resource
                Resource decryptedResource = decryptionUtil.decryptResource(encryptedResource);

                // Extract CSV streams
                List<InputStream> csvStreams = unzipUtil.extractCsvFromZip(decryptedResource);

                // Convert each CSV stream into a Spring Resource
                for (InputStream csvStream : csvStreams) {
                    decryptedCsvResources.add(new InputStreamResource(csvStream));
                }
            } catch (Exception e) {
                throw new RuntimeException("Failed to process resource: " + encryptedResource.getDescription(), e);
            }
        }
        super.setResources(decryptedCsvResources.toArray(new Resource[0]));
    }
}
```

---

### **Step 5: Configure `FlatFileItemReader`**

Use a `FlatFileItemReader` to process the extracted CSV files.

```java
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;

@Bean
public FlatFileItemReader<MyData> flatFileItemReader() {
    FlatFileItemReader<MyData> reader = new FlatFileItemReader<>();
    reader.setLinesToSkip(1); // Skip header row

    DefaultLineMapper<MyData> lineMapper = new DefaultLineMapper<>();
    DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
    tokenizer.setNames("id", "name", "value"); // CSV column names
    lineMapper.setLineTokenizer(tokenizer);
    lineMapper.setFieldSetMapper(fieldSet -> new MyData(
            fieldSet.readInt("id"),
            fieldSet.readString("name"),
            fieldSet.readDouble("value")
    ));
    reader.setLineMapper(lineMapper);

    return reader;
}
```

---

### **Step 6: Configure Spring Batch Step and Job**

Define the batch step and link it to a job.

```java
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.ItemWriter;

@Bean
public Step processStep(StepBuilderFactory stepBuilderFactory,
                        DecryptingMultiResourceItemReader<MyData> decryptingReader,
                        ItemWriter<MyData> itemWriter) {
    return stepBuilderFactory.get("processStep")
            .<MyData, MyData>chunk(10)
            .reader(decryptingReader)
            .writer(itemWriter)
            .build();
}

@Bean
public Job processEncryptedCsvJob(JobBuilderFactory jobBuilderFactory, Step processStep) {
    return jobBuilderFactory.get("processEncryptedCsvJob")
            .start(processStep)
            .build();
}
```

---

### **Step 7: Inject Dependencies**

Set up all dependencies in your application class or configuration class.

```java
@SpringBootApplication
public class BatchProcessingApplication {

    public static void main(String[] args) {
        SpringApplication.run(BatchProcessingApplication.class, args);
    }

    @Bean
    public CosService cosService() {
        return new CosService();
    }

    @Bean
    public Decryptor decryptor() {
        return new Decryptor(); // Your existing decryption logic
    }

    @Bean
    public DecryptionUtil decryptionUtil(Decryptor decryptor) {
        return new DecryptionUtil(decryptor);
    }

    @Bean
    public UnzipUtil unzipUtil() {
        return new UnzipUtil();
    }
}
```

---

### **Execution Flow**

1. Fetch `.zip.pgp` files from the COS bucket using `CosService`.
2. Decrypt the `.pgp` files into `.zip` files using `DecryptionUtil`.
3. Extract CSVs from `.zip` files using `UnzipUtil`.
4. Process CSV rows using `FlatFileItemReader`.
5. Run the Spring Batch job to process all the files.

---

Let me know if you need further clarifications or specific adjustments! ðŸš€



ibm.mq.queueManager=QM1
ibm.mq.topic=MY.TOPIC
ibm.mq.subscriptionName=MY.DURABLE.SUB
ibm.mq.channel=DEV.APP.SVRCONN
ibm.mq.connName=localhost(1414)
ibm.mq.user=mquser
ibm.mq.password=passw0rd
