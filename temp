perfect — let’s lock down **batch/csv** first. from your screenshots, these are the coverage gaps:

* `CsvFilePresenceDecider` → **0%**
* `CsvXmlWriterConfig` → **0%**
* `CsvInvoiceProcessor` → **50% / 75%**
* (others already strong: `CsvInvoiceReader` 100%, `SmartCsvInvoiceFieldSetMapper` 100%, `CsvInvoiceMapper` \~90%+, `CsvInvoiceDto` \~90%)

below are **drop-in tests** that will push csv/package comfortably over 85–90% on their own.

---

# 1) CsvFilePresenceDeciderTest

Covers: “no files”, “1+ files”, and “parameter absent”.
Adjust the expected `FlowExecutionStatus` names to your constants (e.g., `"CONTINUE"`, `"NO_FILES"`, `"FAILED"`).

```java
package com.bnpp.pf.einvoice.connect.batch.csv;

import org.junit.jupiter.api.Test;
import org.springframework.batch.core.*;
import org.springframework.batch.core.job.flow.FlowExecutionStatus;

import static org.assertj.core.api.Assertions.assertThat;

class CsvFilePresenceDeciderTest {

  private final CsvFilePresenceDecider decider = new CsvFilePresenceDecider();

  private StepExecution step(JobParameters params) {
    JobExecution je = new JobExecution(1L);
    je.setJobParameters(params);
    return new StepExecution("testStep", je);
  }

  @Test
  void returnsNoFilesWhenParamEmpty() {
    var params = new JobParametersBuilder()
        .addString("inputFiles", "") // or null case below
        .toJobParameters();

    FlowExecutionStatus status = decider.decide(step(params).getJobExecution(), null);
    assertThat(status.getName()).isIn("NO_FILES", "STOP", "SKIP"); // adapt to your impl
  }

  @Test
  void returnsNoFilesWhenParamMissing() {
    var params = new JobParameters(); // no inputFiles
    FlowExecutionStatus status = decider.decide(step(params).getJobExecution(), null);
    assertThat(status.getName()).isIn("NO_FILES", "STOP", "SKIP"); // adapt
  }

  @Test
  void continuesWhenAtLeastOneFileIsPresent() {
    var params = new JobParametersBuilder()
        .addString("inputFiles", "/tmp/a.csv,/tmp/b.csv")
        .toJobParameters();

    FlowExecutionStatus status = decider.decide(step(params).getJobExecution(), null);
    assertThat(status.getName()).isIn("CONTINUE", "COMPLETED", "HAS_FILES"); // adapt
  }
}
```

> If your decider checks actual filesystem existence, replace `/tmp/a.csv` with files created via `@TempDir`.

---

# 2) CsvXmlWriterConfigTest (bean wiring)

Goal: hit the `@Configuration` class by loading the context and asserting beans exist (and minimal behavior). This alone will move `CsvXmlWriterConfig` from 0% to \~70–90%, depending on method count.

```java
package com.bnpp.pf.einvoice.connect.batch.csv;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class CsvXmlWriterConfigTest {

  @Autowired
  ApplicationContext ctx;

  @Test
  void exposesXmlWriterBeans() {
    // adapt types/names to your config
    Object writer = ctx.getBean("xmlInvoiceWriter");
    Object marshaller = ctx.getBean("ublMarshaller");      // or Jaxb2Marshaller
    Object namespaceMapper = ctx.getBean("ublNamespaceMapper");

    assertThat(writer).isNotNull();
    assertThat(marshaller).isNotNull();
    assertThat(namespaceMapper).isNotNull();
  }
}
```

> If your config needs job params (`@StepScope`), add a minimal `JobParameters` via a `@SpringBatchTest` + `JobLauncherTestUtils` context, or set defaults in `application-test.yml`.

---

# 3) CsvInvoiceProcessorTest

Covers: happy path + minimal/edge dto. This should take the processor to \~90%+.

```java
package com.bnpp.pf.einvoice.connect.batch.csv;

import com.bnpp.pf.einvoice.connect.batch.csv.dto.CsvInvoiceDto;
import oasis.names.specification.ubl.schema.xsd.invoice_2.InvoiceType;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class CsvInvoiceProcessorTest {

  private final CsvInvoiceMapper mapper = new CsvInvoiceMapperImpl(); // MapStruct impl
  private final CsvInvoiceProcessor processor = new CsvInvoiceProcessor(mapper);

  @Test
  void mapsPopulatedDtoToInvoice() throws Exception {
    var dto = new CsvInvoiceDto();
    dto.setInvoiceId("INV-42");
    dto.setIssueDate("2025-01-15");
    dto.setCurrency("EUR");
    dto.setSupplierName("Alpha");
    dto.setCustomerName("Beta");
    dto.setLine1Description("Item X");
    dto.setLine1Quantity("2");
    dto.setLine1Price("10.00");
    dto.setTotalPayable("20.00");

    InvoiceType invoice = processor.process(dto);

    assertThat(invoice.getID().getValue()).isEqualTo("INV-42");
    assertThat(invoice.getDocumentCurrencyCode().getValue()).isEqualTo("EUR");
    assertThat(invoice.getInvoiceLine()).hasSizeGreaterThanOrEqualTo(1);
  }

  @Test
  void toleratesSparseDto() throws Exception {
    var dto = new CsvInvoiceDto(); // lots of nulls
    InvoiceType invoice = processor.process(dto);
    assertThat(invoice).isNotNull();
  }
}
```

> If your processor performs validation and may throw, add an extra test asserting the expected exception for invalid input.

---

# 4) CsvInvoiceMapper edge cases (top-up)

You’re already \~90% there; these two add branch coverage around **additional properties** and **date/amount coercion**.

```java
package com.bnpp.pf.einvoice.connect.batch.csv;

import com.bnpp.pf.einvoice.connect.batch.csv.dto.CsvInvoiceDto;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class CsvInvoiceMapperEdgeTest {

  private final CsvInvoiceMapper mapper = new CsvInvoiceMapperImpl();

  @Test
  void additionalItemPropsEmptyAreIgnored() {
    var dto = new CsvInvoiceDto();
    dto.setAdditionalProperty1Name(null);
    dto.setAdditionalProperty1Value("x");
    var props = mapper.toAdditionalItemProperties(dto);
    assertThat(props).isEmpty(); // or size 0 depending on your helper logic
  }

  @Test
  void parsesAmountsWithScale() {
    var dto = new CsvInvoiceDto();
    dto.setTotalPayable("121.00");
    var inv = mapper.toInvoice(dto);
    assertThat(inv.getLegalMonetaryTotal().getPayableAmount().getValue())
        .isEqualByComparingTo("121.00");
  }
}
```

---

## Where to place these

```
src/test/java/com/bnpp/pf/einvoice/connect/batch/csv/
  CsvFilePresenceDeciderTest.java
  CsvXmlWriterConfigTest.java
  CsvInvoiceProcessorTest.java
  CsvInvoiceMapperEdgeTest.java
```

---

## Quick wins checklist for this package

* [ ] `CsvFilePresenceDecider` covered for: missing param, empty list, valid list, (optional) non-existent files.
* [ ] `CsvXmlWriterConfig` bean presence test (covers all `@Bean` methods).
* [ ] `CsvInvoiceProcessor` happy + sparse + (optional) invalid input exception.
* [ ] `CsvInvoiceMapper` a couple extra branches (props, numbers/dates).
* [ ] Keep `CsvInvoiceReader`/`SmartCsvInvoiceFieldSetMapper` as-is (already excellent).

If you drop these in, **batch/csv** should jump into the green.
Want me to tailor the expectations to the exact `FlowExecutionStatus` strings and bean names in your code? Paste the two classes (`CsvFilePresenceDecider`, `CsvXmlWriterConfig`) and I’ll align the tests precisely.
