Perfect—since you already have **XMLInvoiceWriter** and **XMLCreditNoteWriter**, just route items to the right writer at runtime.

## 1) Processor: CSV → either `InvoiceType` or `CreditNoteType`

```java
@Component
@StepScope
@RequiredArgsConstructor
public class CsvToUblProcessor implements ItemProcessor<CsvInvoiceDto, Object> {
  private final CsvInvoiceMapper mapper; // add toCreditNoteType() if not present

  @Override
  public Object process(CsvInvoiceDto dto) {
    return "381".equals(dto.getInvoiceTypeCode())
        ? mapper.toCreditNoteType(dto)
        : mapper.toInvoiceType(dto); // default 380
  }
}
```

## 2) Classifier writer: delegate to your two writers

```java
@Configuration
public class WriterConfig {

  @Bean
  @StepScope
  @SuppressWarnings("unchecked")
  public ClassifierCompositeItemWriter<Object> ublClassifierWriter(
      XMLInvoiceWriter invoiceWriter,           // ItemWriter<InvoiceType>
      XMLCreditNoteWriter creditNoteWriter) {   // ItemWriter<CreditNoteType>

    ClassifierCompositeItemWriter<Object> cw = new ClassifierCompositeItemWriter<>();
    cw.setClassifier(item -> {
      if (item instanceof oasis.names.specification.ubl.schema.xsd.invoice_2.InvoiceType) {
        return (ItemWriter<Object>) (ItemWriter<?>) invoiceWriter;
      } else if (item instanceof oasis.names.specification.ubl.schema.xsd.creditnote_2.CreditNoteType) {
        return (ItemWriter<Object>) (ItemWriter<?>) creditNoteWriter;
      } else {
        throw new IllegalArgumentException("Unsupported type: " + item.getClass());
      }
    });
    return cw;
  }
}
```

> No changes needed inside your existing `XMLInvoiceWriter` / `XMLCreditNoteWriter`.

## 3) Step wiring: make the chunk polymorphic

```java
@Bean
public Step csvToXmlStep(MultiResourceItemReader<CsvInvoiceDto> reader,
                         CsvToUblProcessor processor,
                         ClassifierCompositeItemWriter<Object> ublClassifierWriter) {
  return new StepBuilder("csvToXmlStep", jobRepository)
      .<CsvInvoiceDto, Object>chunk(50, transactionManager)
      .reader(reader)
      .processor(processor)
      .writer(ublClassifierWriter)
      .build();
}
```

## 4) Mapper interface (MapStruct)

```java
@Mapper(componentModel = "spring", builder = @Builder(disableBuilder = true))
public interface CsvInvoiceMapper {
  InvoiceType toInvoiceType(CsvInvoiceDto src);
  CreditNoteType toCreditNoteType(CsvInvoiceDto src);
}
```

That’s it. Now rows with `InvoiceTypeCode == "381"` go to **XMLCreditNoteWriter**, everything else goes to **XMLInvoiceWriter**—clean, type-safe, and keeps your writers separate.
