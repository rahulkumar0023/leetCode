Perfect ‚Äî you‚Äôve highlighted the red-marked (uncovered) parts of your **`CsvInvoiceMapper`**, specifically:

* `toUUID(String)`
* `toIssueDate(String)` (and probably `toDueDate(String)`)
* plus the **supplier address mapping** section (postal zone, subentity, address line, etc.).

Let‚Äôs add **JUnit 5 + AssertJ** tests that cover all those red lines.

---

### ‚úÖ 1. Unit test for the helper conversion methods

These are simple null/non-null cases for your `default` MapStruct helpers like `toUUID`, `toIssueDate`, and `toDueDate`.

```java
package com.alphacredit.batch.mapping;

import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.*;
import org.junit.jupiter.api.Test;
import java.util.GregorianCalendar;
import javax.xml.datatype.DatatypeFactory;

import static org.assertj.core.api.Assertions.*;

class CsvInvoiceMapperHelperTest {

    private final CsvInvoiceMapper mapper = new CsvInvoiceMapperImpl();

    @Test
    void toUUID_returnsNull_whenInputIsNull() {
        assertThat(mapper.toUUID(null)).isNull();
    }

    @Test
    void toUUID_setsValue_whenInputPresent() {
        UUIDType uuid = mapper.toUUID("123e4567");
        assertThat(uuid).isNotNull();
        assertThat(uuid.getValue()).isEqualTo("123e4567");
    }

    @Test
    void toIssueDate_returnsNull_whenInputIsNull() {
        assertThat(mapper.toIssueDate(null)).isNull();
    }

    @Test
    void toIssueDate_parsesValidDate() {
        IssueDateType date = mapper.toIssueDate("2025-10-10");
        assertThat(date.getValue().toGregorianCalendar().get(GregorianCalendar.YEAR))
                .isEqualTo(2025);
    }

    @Test
    void toDueDate_parsesValidDate() {
        DueDateType date = mapper.toDueDate("2025-12-31");
        assertThat(date).isNotNull();
        assertThat(date.getValue().toXMLFormat()).isEqualTo("2025-12-31");
    }
}
```

‚úÖ This will give you full coverage for the red bar around lines 170‚Äì182 (null + non-null branches).

---

### ‚úÖ 2. Unit test for the supplier address mapping logic

Your address-building code runs only when the source DTO has non-empty supplier fields.
We can build a `CsvInvoiceDto` with minimal address fields and call the `toInvoice` (or the private mapping helper if exposed).

```java
package com.alphacredit.batch.mapping;

import com.alphacredit.batch.domain.CsvInvoiceDto;
import oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.AddressType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.*;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.*;

class CsvInvoiceMapperAddressTest {

    private final CsvInvoiceMapper mapper = new CsvInvoiceMapperImpl();

    @Test
    void mapsSupplierAddressFields_whenPresent() {
        CsvInvoiceDto dto = new CsvInvoiceDto();
        dto.setSupplierStreetName("Main Street 1");
        dto.setSupplierAdditionalStreetName("Block B");
        dto.setSupplierCityName("Brussels");
        dto.setSupplierPostalZone("1000");
        dto.setSupplierCountrySubentity("Flemish Region");
        dto.setSupplierAddressLineCbcLine("Line A");
        dto.setSupplierCountryCbcIdentificationCode("BE");

        var inv = mapper.toInvoice(dto);

        AddressType addr = inv.getAccountingSupplierParty()
                              .getParty()
                              .getPostalAddress();

        assertThat(addr.getStreetName().getValue()).isEqualTo("Main Street 1");
        assertThat(addr.getAdditionalStreetName().getValue()).isEqualTo("Block B");
        assertThat(addr.getCityName().getValue()).isEqualTo("Brussels");
        assertThat(addr.getPostalZone().getValue()).isEqualTo("1000");
        assertThat(addr.getCountrySubentity().getValue()).isEqualTo("Flemish Region");
        assertThat(addr.getAddressLine().get(0).getLine().getValue()).isEqualTo("Line A");
        assertThat(addr.getCountry().getIdentificationCode().getValue()).isEqualTo("BE");
    }

    @Test
    void skipsNullOrEmptyFields() {
        CsvInvoiceDto dto = new CsvInvoiceDto(); // all nulls
        var inv = mapper.toInvoice(dto);
        AddressType addr = inv.getAccountingSupplierParty()
                              .getParty()
                              .getPostalAddress();
        // none of these optional fields should be set
        assertThat(addr.getStreetName()).isNull();
        assertThat(addr.getPostalZone()).isNull();
        assertThat(addr.getAddressLine()).isEmpty();
    }
}
```

‚úÖ This covers every `if (StringUtils.isNotEmpty(...))` branch (true + false).
Together with the first test class, you‚Äôll hit all the red blocks you showed in your screenshots.

---

Would you like me to include the **`toDueDate`** and **`toXmlDate`** helpers in the same test class (for 100 % mapper helper coverage), or keep them separated as above?


Perfect üëè ‚Äî even better. YAML makes this cleaner and more readable than properties.
Here‚Äôs the **production-grade, Sonar-safe setup** using your existing `application.yaml` format.

---

## ‚úÖ **1. application.yaml**

```yaml
work:
  root: /var/app/alphacredit      # or /tmp/alphacredit in containers
  processed:
    xml: ${work.root}/processed/xml
    pdf: ${work.root}/processed/pdf
    csv: ${work.root}/processed/csv
  output: ${work.root}/output
```

**üëâ Why this is great**

* All file paths are centralized.
* You can easily override `work.root` per environment (`dev`, `uat`, `prod`).
* No hardcoding of `/tmp` in your Java code.

---

## ‚úÖ **2. Strongly-typed configuration class**

```java
@Component
@ConfigurationProperties(prefix = "work")
@Getter
@Setter
public class WorkDirectoryProperties {

    private Path root;
    private Processed processed = new Processed();
    private Path output;

    @Getter
    @Setter
    public static class Processed {
        private Path xml;
        private Path pdf;
        private Path csv;
    }

    @PostConstruct
    void init() throws IOException {
        // Create all required directories with restricted permissions
        for (Path dir : List.of(processed.xml, processed.pdf, processed.csv, output)) {
            if (dir != null) {
                Files.createDirectories(dir);
                try {
                    Files.setPosixFilePermissions(dir,
                            PosixFilePermissions.fromString("rwx------"));
                } catch (UnsupportedOperationException ignored) {
                    // Windows or non-POSIX FS: safe to ignore
                }
            }
        }
    }
}
```

**‚úÖ Advantages**

* No hardcoded `/tmp` ‚Üí passes Sonar security checks.
* Automatically creates required directories.
* Secure (`rwx------`) permissions on Unix.
* Central place to manage all work paths.
* Clean YAML ‚Üí clean code ‚Üí easy to maintain.

---

## ‚úÖ **3. Usage in your code**

```java
@Component
@RequiredArgsConstructor
@Slf4j
public class PackageAndUploadTasklet implements Tasklet {

    private final WorkDirectoryProperties dirs;

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext context) throws Exception {
        Path xmlDir = dirs.getProcessed().getXml();
        Path outputDir = dirs.getOutput();

        log.info("Processing XML from {}", xmlDir);
        log.info("Writing output to {}", outputDir);

        // ... your logic here ...

        return RepeatStatus.FINISHED;
    }
}
```

---

### üß© **Optional Integration**

If you want to use the same base directory for secure temporary files (like your PGP key `.asc` files), you can reuse it:

```java
Path tempDir = dirs.getRoot().resolve("temp");
Files.createDirectories(tempDir);
File tempFile = Files.createTempFile(tempDir, filePrefix, ".asc").toFile();
```

That way **everything (input, output, temp)** stays within one controlled, private root.

---

‚úÖ **Final Result**

* Sonar warnings disappear.
* Fully production-safe (no `/tmp` exposure).
* Works the same on-prem, Docker, or K8s.
* Clean YAML config, no magic strings or SpEL.

---

Would you like me to also show how to adapt your **PGP key loading method** (`convertStringToTempFile`) to use this same config structure, so all temp key files go into your secure `work.root/temp` folder?
