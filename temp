import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.springframework.core.io.Resource;

public class UnzipUtil {

    /**
     * Extracts all files from a ZIP resource.
     *
     * @param zipResource the decrypted Resource representing the ZIP file
     * @return a list of InputStreams, each representing a file in the ZIP
     * @throws RuntimeException if an error occurs during extraction
     */
    public List<InputStream> extractStreamsFromZip(Resource zipResource) {
        List<InputStream> extractedStreams = new ArrayList<>();

        try (ZipInputStream zis = new ZipInputStream(new BufferedInputStream(zipResource.getInputStream()))) {
            ZipEntry entry;

            // Iterate through the entries in the ZIP file
            while ((entry = zis.getNextEntry()) != null) {
                if (!entry.isDirectory()) {
                    // Extract the file
                    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
                    byte[] temp = new byte[1024];
                    int bytesRead;

                    while ((bytesRead = zis.read(temp)) != -1) {
                        buffer.write(temp, 0, bytesRead);
                    }

                    // Add the extracted file as a ByteArrayInputStream
                    extractedStreams.add(new ByteArrayInputStream(buffer.toByteArray()));
                }
                zis.closeEntry();
            }
        } catch (Exception e) {
            throw new RuntimeException("Failed to extract files from ZIP resource", e);
        }

        return extractedStreams;
    }
}
