@ExtendWith(MockitoExtension.class)
class SafeApacheExtractorExtraCoverageTest {

    @TempDir
    Path tempDir;

    @Test
    void testThrowsWhenZipFileNotReadable() {
        Path fakeZip = tempDir.resolve("missing.zip");
        InvoiceProcessingException ex = assertThrows(
                InvoiceProcessingException.class,
                () -> SafeApacheExtractor.extract(fakeZip, tempDir)
        );
        assertTrue(ex.getMessage().contains("not readable"));
    }

    @Test
    void testGetOutputPathRejectsUnsafeNames() throws Exception {
        Path targetDir = Files.createTempDirectory(tempDir, "unzipped");
        ZipArchiveEntry badEntry = new ZipArchiveEntry("../evil.txt");
        InvoiceProcessingException ex = assertThrows(
                InvoiceProcessingException.class,
                () -> ReflectionTestUtils.invokeMethod(
                        new SafeApacheExtractor(), "getOutputPath", targetDir.toRealPath(), badEntry)
        );
        assertTrue(ex.getMessage().contains("Unsafe"));
    }

    @Test
    void testGetOutputPathRejectsPathEscape() throws Exception {
        Path targetDir = Files.createTempDirectory(tempDir, "unzipped");
        ZipArchiveEntry trickyEntry = new ZipArchiveEntry("..\\escape.txt");
        InvoiceProcessingException ex = assertThrows(
                InvoiceProcessingException.class,
                () -> ReflectionTestUtils.invokeMethod(
                        new SafeApacheExtractor(), "getOutputPath", targetDir.toRealPath(), trickyEntry)
        );
        assertTrue(ex.getMessage().contains("escapes"));
    }
}
