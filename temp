### **üöÄ How to Ensure `@Value("${pgp.private-key}")` is Available Before `@Bean` Initialization**
Yes, you can **ensure that `@Value` is injected before the `@Bean` method is created** using **constructor-based injection instead of field injection**.

---

## **‚úÖ Solution: Use Constructor Injection Instead of Field Injection**
By **injecting `privateKeyString` through the constructor**, it will be available before the `@Bean` method runs.

### **üîπ Modify `PGPConfig`**
```java
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

@Configuration
public class PGPConfig {

    private final String privateKeyString;

    // ‚úÖ Use constructor injection instead of @Value on a field
    public PGPConfig(@Value("${pgp.private-key}") String privateKeyString) {
        this.privateKeyString = privateKeyString;
    }

    @Bean
    public PGPDecrypt pgpDecrypt() throws IOException {
        // ‚úÖ Convert the private key String into a temporary file
        File privateKeyFile = createTempFile(privateKeyString);

        // ‚úÖ Pass the file to PGPDecrypt
        return new PGPDecrypt(privateKeyFile);
    }

    private File createTempFile(String keyContent) throws IOException {
        File tempFile = File.createTempFile("pgp-private-key", ".asc");
        tempFile.deleteOnExit(); // ‚úÖ Automatically delete file after JVM exits

        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write(keyContent);
        }

        return tempFile;
    }
}
```
‚úÖ **Now, `privateKeyString` is injected before the `@Bean` method runs.**

---

## **‚úÖ Solution: Use `@ConfigurationProperties` Instead of `@Value`**
Another approach is to use `@ConfigurationProperties`, which **binds multiple properties at once**.

### **üîπ Create a Configuration Class for PGP Properties**
```java
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "pgp")
public class PGPProperties {
    private String privateKey;

    public String getPrivateKey() {
        return privateKey;
    }

    public void setPrivateKey(String privateKey) {
        this.privateKey = privateKey;
    }
}
```

### **üîπ Modify `PGPConfig` to Use `PGPProperties`**
```java
@Configuration
public class PGPConfig {

    private final PGPProperties pgpProperties;

    public PGPConfig(PGPProperties pgpProperties) {
        this.pgpProperties = pgpProperties;
    }

    @Bean
    public PGPDecrypt pgpDecrypt() throws IOException {
        String privateKeyString = pgpProperties.getPrivateKey();
        File privateKeyFile = createTempFile(privateKeyString);

        return new PGPDecrypt(privateKeyFile);
    }

    private File createTempFile(String keyContent) throws IOException {
        File tempFile = File.createTempFile("pgp-private-key", ".asc");
        tempFile.deleteOnExit();

        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write(keyContent);
        }

        return tempFile;
    }
}
```

‚úÖ **Now, `PGPProperties` ensures that `privateKey` is loaded before `@Bean` creation.**

---

## **‚úÖ Solution: Set a Default Value to Avoid `null` in Tests**
If `privateKeyString` is `null` during tests, set a **default value**.

### **üîπ Modify `PGPConfig` to Use Default Key in Tests**
```java
public PGPConfig(@Value("${pgp.private-key:-----BEGIN PGP PRIVATE KEY----- MOCKED}") String privateKeyString) {
    this.privateKeyString = privateKeyString;
}
```
‚úÖ **Now, even if `pgp.private-key` is missing, a default key will be used.**

---

## **üöÄ Final Fix Checklist**
| **Issue** | **Solution** |
|-----------|-------------|
| ‚ùå `@Value` is not available before `@Bean` | ‚úÖ Use constructor injection instead of field injection |
| ‚ùå Multiple properties need to be loaded | ‚úÖ Use `@ConfigurationProperties` instead of `@Value` |
| ‚ùå `pgp.private-key` is `null` in tests | ‚úÖ Set a default value using `@Value("${pgp.private-key:MOCKED}")` |

---

### **üî• Now Your PGPConfig Works Without Issues!**
Let me know if you need further refinements! üöÄüòä
