import com.example.csvbatch.model.CsvInvoiceDto;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.mapping.LineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.item.file.transform.DefaultFieldSetFactory;
import org.springframework.batch.item.file.transform.FieldSet;
import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.core.io.Resource;
import org.springframework.batch.item.file.ResourceAwareItemReaderItemStream;
import org.springframework.core.io.Resource;

import javax.annotation.PostConstruct;
import java.io.IOException;

public class CsvInvoiceReader extends FlatFileItemReader<CsvInvoiceDto>
        implements ResourceAwareItemReaderItemStream<CsvInvoiceDto> {

    public CsvInvoiceReader() {
        setName("csvInvoiceReader");
        setLinesToSkip(1); // skip header
        setLineMapper(createLineMapper());
    }

    private LineMapper<CsvInvoiceDto> createLineMapper() {
        DefaultLineMapper<CsvInvoiceDto> lineMapper = new DefaultLineMapper<>();

        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer(";");
        tokenizer.setFieldSetFactory(new DefaultFieldSetFactory());
        tokenizer.setNames(/* your header names here, or constant like CsvHeader.INVOICE_FIELDS */);

        FieldSetMapper<CsvInvoiceDto> fieldSetMapper = new SmartCsvInvoiceFieldSetMapper(); // your custom mapper

        lineMapper.setLineTokenizer(tokenizer);
        lineMapper.setFieldSetMapper(fieldSetMapper);
        return lineMapper;
    }

    @Override
    public void setResource(Resource resource) {
        try {
            super.setResource(resource);
        } catch (IOException e) {
            throw new RuntimeException("Failed to initialize CsvInvoiceReader for: " + resource.getFilename(), e);
        }
    }
}
