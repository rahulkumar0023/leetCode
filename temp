Excellent üëè ‚Äî you‚Äôve done all the heavy lifting already.
Now that your **XmlCreditNoteWriterTest** is working, we‚Äôll apply the same stable, reusable approach to your **other test classes** ‚Äî ensuring every one runs cleanly, without NPEs or temp-path issues, and with full Sonar-compatible coverage.

---

## üß± Your current situation

From your screenshots, the pattern in these other tests is nearly identical:

* They all use temporary directories.
* They all rely on `PathConfig`, but not always initialize it correctly.
* Some tests still use `Path.of("/tmp/...")`, leading to brittle or environment-dependent behavior.

We‚Äôll fix this by creating one **shared base class** and updating each test to use it.

---

## ‚úÖ 1Ô∏è‚É£ Create a reusable test base class

Create a new file:

```java
// src/test/java/com/bnpp/pf/einvoice/connect/config/BasePathConfigTest.java
package com.bnpp.pf.einvoice.connect.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.io.TempDir;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

public abstract class BasePathConfigTest {

    protected PathConfig pathConfig;
    protected Path tempDir;

    @BeforeEach
    void init(@TempDir Path tmp) throws IOException {
        this.tempDir = tmp;
        this.pathConfig = new PathConfig();

        PathConfig.Processed processed = new PathConfig.Processed();
        processed.setXml(tmp.resolve("processed/xml"));
        processed.setPdf(tmp.resolve("processed/pdf"));
        processed.setCsv(tmp.resolve("processed/csv"));

        PathConfig.Unzipped unzipped = new PathConfig.Unzipped();
        unzipped.setXml(tmp.resolve("unzipped/xml"));
        unzipped.setCsv(tmp.resolve("unzipped/csv"));

        pathConfig.setProcessed(processed);
        pathConfig.setUnzipped(unzipped);
        pathConfig.setOutput(tmp.resolve("output"));

        // create all directories
        Files.createDirectories(processed.getXml());
        Files.createDirectories(processed.getPdf());
        Files.createDirectories(processed.getCsv());
        Files.createDirectories(unzipped.getXml());
        Files.createDirectories(unzipped.getCsv());
        Files.createDirectories(pathConfig.getOutput());
    }
}
```

‚úÖ You can now extend this base class from **any** test that needs `pathConfig` or temp directories.
No more repeated boilerplate.

---

## ‚úÖ 2Ô∏è‚É£ Update each test class

### Example: `SplitPDFMoverTest`

```java
class SplitPDFMoverTest extends BasePathConfigTest {

    private SplitPDFMover mover;
    private Path xmlDir;

    @BeforeEach
    void setupMover() throws IOException {
        super.init(tempDir);
        xmlDir = pathConfig.getProcessed().getXml();
        mover = new SplitPDFMover(pathConfig);
    }

    @Test
    void shouldMovePdfSuccessfully() throws Exception {
        Path source = xmlDir.resolve("INV-100.PDF");
        Files.write(source, "PDFDATA".getBytes());
        Path target = tempDir.resolve("dest");
        Files.createDirectories(target);

        mover.movePDF("INV-100", target);

        assertTrue(Files.exists(target.resolve("INV-100.PDF")));
    }
}
```

---

### Example: `PackageAndUploadTaskletTest`

```java
class PackageAndUploadTaskletTest extends BasePathConfigTest {

    private PackageAndUploadTasklet tasklet;

    @BeforeEach
    void setupTasklet() {
        tasklet = new PackageAndUploadTasklet(pathConfig, mock(CosStorageService.class),
                                              mock(CFTApiClient.class), mock(PGPEncrypt.class));
    }

    @Test
    void shouldPrepareAndWriteToOutput() throws Exception {
        tasklet.beforeStep(mock(StepExecution.class));
        RepeatStatus status = tasklet.execute(mock(StepContribution.class), mock(ChunkContext.class));
        assertEquals(RepeatStatus.FINISHED, status);
        assertTrue(Files.isDirectory(pathConfig.getOutput()));
    }
}
```

---

### Example: `XmlCreditNoteWriterTest`

```java
class XmlCreditNoteWriterTest extends BasePathConfigTest {

    @Mock private SplitPDFMover pdfMover;
    @Mock private InvoiceBucketResolver bucketResolver;
    private XmlCreditNoteWriter writer;

    @BeforeEach
    void setupWriter() {
        writer = new XmlCreditNoteWriter(pathConfig, pdfMover, bucketResolver);
    }

    @Test
    void testWriteXmlJobTypeWithSupplierBucket() throws Exception {
        ReflectionTestUtils.setField(writer, "jobType", "xml");

        CreditNoteType creditNote = new CreditNoteType();
        IDType id = new IDType(); id.setValue("CN123");
        creditNote.setID(id);

        CreditNoteTypeCodeType codeType = new CreditNoteTypeCodeType();
        codeType.setValue("261");
        creditNote.setCreditNoteTypeCode(codeType);

        when(bucketResolver.resolveBucket(any())).thenReturn("supplier_67890");

        writer.write(new Chunk<>(List.of(creditNote)));

        Path expected = pathConfig.getOutput().resolve("xml/miles");
        assertTrue(Files.exists(expected));
        verify(pdfMover, times(1)).movePDF(anyString(), eq(expected));
    }
}
```

---

## ‚úÖ 3Ô∏è‚É£ Benefits of this setup

| Advantage        | Description                                              |
| ---------------- | -------------------------------------------------------- |
| ‚úÖ Consistent     | Every test uses `@TempDir` with a fresh clean filesystem |
| ‚úÖ Safe           | No `/tmp` hardcoding, Sonar is satisfied                 |
| ‚úÖ Simple         | No need to rebuild `PathConfig` repeatedly               |
| ‚úÖ Portable       | Works on all OS / CI environments                        |
| ‚úÖ Easy to extend | You can mock services or add extra setup per test class  |

---

## ‚úÖ 4Ô∏è‚É£ (Optional) Use a `@TestConfiguration` bean for integration tests

If you later add Spring integration tests (`@SpringBootTest`),
create this in `src/test/java/.../TestConfig.java`:

```java
@TestConfiguration
public class TestConfig {

    @Bean
    public PathConfig testPathConfig(@TempDir Path tmp) throws IOException {
        PathConfig pathConfig = new PathConfig();
        PathConfig.Processed processed = new PathConfig.Processed();
        processed.setXml(tmp.resolve("processed/xml"));
        processed.setPdf(tmp.resolve("processed/pdf"));
        processed.setCsv(tmp.resolve("processed/csv"));
        pathConfig.setProcessed(processed);
        pathConfig.setOutput(tmp.resolve("output"));
        Files.createDirectories(pathConfig.getOutput());
        return pathConfig;
    }
}
```

Spring will inject this test bean instead of your production one.

---

### ‚úÖ TL;DR ‚Äî the clean, reusable approach

1. **Create** `BasePathConfigTest` with reusable temp setup.
2. **Extend** it in every test needing `pathConfig`.
3. **Inject** it into your class under test (e.g., tasklet, writer, mover).
4. **No more `/tmp` hardcoding**, no more NPEs.
5. Tests are isolated, fast, and fully Sonar-compliant.

---

Would you like me to show you the *updated version* of one of your other test classes (for example, `PackageAndUploadTaskletTest` or `CosStorageServiceTest`) rewritten to extend this new base class and run cleanly?
