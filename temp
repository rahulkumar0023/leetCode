import java.nio.file.*;
import java.util.*;

public class CsvFieldGenerator {
    public static void main(String[] args) throws Exception {
        // Change this path to your header file path
        List<String> lines = Files.readAllLines(Paths.get("headers.txt"));
        
        // If your file is CSV-like (all headers in one line, separated by ';' or ','):
        // String headerLine = lines.get(0);
        // String[] headers = headerLine.replace("\"", "").split(";"); // or split(",") if comma-separated

        // If each header is on its own line:
        String[] headers = lines.stream().map(h -> h.replace("\"", "").trim()).toArray(String[]::new);

        for (String header : headers) {
            if (header.isBlank()) continue;
            String javaField = toJavaField(header);
            System.out.println("    @CsvBindByName(column = \"" + header + "\")");
            System.out.println("    private String " + javaField + ";");
            System.out.println();
        }
    }

    // Convert header like "BuyerReference" or "InvoicePeriod_StartDate" to "buyerReference" or "invoicePeriodStartDate"
    private static String toJavaField(String header) {
        // Remove invalid characters, handle underscores (simple camelCase)
        String[] parts = header.split("_");
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < parts.length; i++) {
            String part = parts[i].replaceAll("[^a-zA-Z0-9]", "");
            if (i == 0)
                sb.append(part.substring(0, 1).toLowerCase()).append(part.substring(1));
            else if (!part.isEmpty())
                sb.append(part.substring(0, 1).toUpperCase()).append(part.substring(1));
        }
        return sb.toString();
    }
}
