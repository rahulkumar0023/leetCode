@Test
void testZipEncryptUploadFiles_createsZipAndEncryptsAndUploads() throws Exception {
    Path processedDir = Files.createDirectories(tempDir.resolve("processedDir"));
    Files.writeString(processedDir.resolve("invoice1.xml"), "<xml>dummy</xml>");
    Files.writeString(processedDir.resolve("invoice2.xml"), "<xml>dummy2</xml>");

    ReflectionTestUtils.setField(tasklet, "OUTPUT_DIR", tempDir);

    // âœ… FIX: correct mock for encrypt()
    doAnswer(invocation -> {
        try (var in = (InputStream) invocation.getArgument(0);
             var out = (OutputStream) invocation.getArgument(1)) {
            in.transferTo(out);
        }
        return null;
    }).when(pgpEncrypt).encrypt(any(InputStream.class), any(OutputStream.class));

    doNothing().when(cosStorageService).uploadFile(anyString(), any(File.class));
    doNothing().when(cosStorageService).moveFile(anyString(), anyString());
    doNothing().when(cftApiClient).notifyUpload(anyString(), anyString());

    var method = PackageAndUploadTasklet.class
            .getDeclaredMethod("zipEncryptUploadFiles", Path.class, String.class);
    method.setAccessible(true);
    method.invoke(tasklet, processedDir, "miles");

    File[] generated = tempDir.toFile().listFiles();
    assertThat(generated).isNotEmpty();
    assertThat(Arrays.stream(generated).anyMatch(f -> f.getName().endsWith(".zip"))).isTrue();
    assertThat(Arrays.stream(generated).anyMatch(f -> f.getName().endsWith(".pgp"))).isTrue();
}
