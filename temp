@Bean
public MultiResourceItemReader<InvoiceType> multiInvoiceReader() {
    MultiResourceItemReader<InvoiceType> reader = new MultiResourceItemReader<>();
    ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
    Resource[] resources;

    try {
        resources = resolver.getResources("classpath:input/*.xml");
    } catch (IOException e) {
        throw new RuntimeException("Failed to load input XML files", e);
    }

    reader.setResources(resources);
    reader.setDelegate(singleInvoiceReader());
    return reader;
}




public class SingleInvoiceReader implements ResourceAwareItemReaderItemStream<InvoiceType> {

    private Resource resource;
    private boolean alreadyRead = false;

    @Override
    public void setResource(Resource resource) {
        this.resource = resource;
    }

    @Override
    public InvoiceType read() throws Exception {
        if (alreadyRead) return null;

        JAXBContext ctx = JAXBContext.newInstance("network.oxalis.peppol.ubl2.jaxb");
        Unmarshaller unmarshaller = ctx.createUnmarshaller();

        try (InputStream is = resource.getInputStream()) {
            JAXBElement<InvoiceType> root = (JAXBElement<InvoiceType>) unmarshaller.unmarshal(is);
            alreadyRead = true;
            return root.getValue();
        }
    }

    @Override
    public void open(ExecutionContext executionContext) { alreadyRead = false; }

    @Override
    public void update(ExecutionContext executionContext) { }

    @Override
    public void close() { }
}
