import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.ssl.NoopHostnameVerifier;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.springframework.http.*;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestTemplateBuilder;

import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

@Service
public class RestApiClient {

    private final RestTemplate restTemplate;

    public RestApiClient(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplate = restTemplateBuilder
                .basicAuthentication("your-username", "your-password") // ✅ Basic Authentication
                .requestFactory(() -> new HttpComponentsClientHttpRequestFactory(createUnsecuredHttpClient())) // ✅ Fix SSL issue
                .build();
    }

    public void notifyUpload(String partId, String clientId, String fileName) {
        try {
            // ✅ API URL with query parameters
            String apiUrl = "https://example.com/api/notify-upload?partId={partId}&clientId={clientId}";

            // ✅ Set request headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            // ✅ Create JSON request body
            Map<String, String> requestBody = new HashMap<>();
            requestBody.put("fname", fileName);

            // ✅ Create HTTP Entity with headers & body
            HttpEntity<Map<String, String>> requestEntity = new HttpEntity<>(requestBody, headers);

            // ✅ Define URL parameters
            Map<String, String> uriVariables = new HashMap<>();
            uriVariables.put("partId", partId);
            uriVariables.put("clientId", clientId);

            // ✅ Log Request
            System.out.println("🔹 Sending API Request to: " + apiUrl);
            System.out.println("🔹 Headers: " + headers);
            System.out.println("🔹 Body: " + requestBody);

            // ✅ Execute API Call
            ResponseEntity<String> response = restTemplate.exchange(apiUrl, HttpMethod.POST, requestEntity, String.class, uriVariables);

            // ✅ Log Response
            System.out.println("✅ API Response Status: " + response.getStatusCode());
            System.out.println("✅ API Response Body: " + response.getBody());

        } catch (Exception e) {
            System.err.println("❌ API Call Failed: " + e.getMessage());
        }
    }

    // ✅ Fixed SSL Configuration for Apache HttpClient 5
    private static CloseableHttpClient createUnsecuredHttpClient() {
        try {
            // Create an SSL Context that trusts all certificates
            SSLContext sslContext = SSLContextBuilder.create()
                    .loadTrustMaterial((TrustStrategy) (X509Certificate[] chain, String authType) -> true) // Trust All
                    .build();

            return HttpClients.custom()
                    .setSSLContext(sslContext)
                    .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE) // Ignore Hostname verification
                    .build();

        } catch (Exception e) {
            throw new RuntimeException("Error creating SSL Ignoring HTTP Client", e);
        }
    }
}
