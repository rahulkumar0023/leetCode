Perfect ðŸ‘Œ â€” now I see two more classes youâ€™d like to cover with tests:

1. **`SupplierEntity`** (a JPA entity with Lombok getters/setters)
2. **`CosConfig`** (a Spring `@ConfigurationProperties` bean with Lombok)

Since you asked earlier to avoid `@SpringBootTest`, weâ€™ll keep these tests plain **JUnit 5**, with **ReflectionTestUtils** (or direct setters) to validate behavior.

---

## 1. `SupplierEntityTest.java`

```java
package com.bnpp.pf.einvoice.connect.batch.entity;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class SupplierEntityTest {

    @Test
    void gettersAndSettersWork() {
        SupplierEntity supplier = new SupplierEntity();
        supplier.setId(1L);
        supplier.setEnterpriseNumber("ENT-123");
        supplier.setCompanyName("Alpha Ltd");

        assertThat(supplier.getId()).isEqualTo(1L);
        assertThat(supplier.getEnterpriseNumber()).isEqualTo("ENT-123");
        assertThat(supplier.getCompanyName()).isEqualTo("Alpha Ltd");
    }

    @Test
    void equalityAndHashCodeBasedOnFields() {
        SupplierEntity s1 = new SupplierEntity();
        s1.setId(1L);
        s1.setEnterpriseNumber("ENT-123");
        s1.setCompanyName("Alpha");

        SupplierEntity s2 = new SupplierEntity();
        s2.setId(1L);
        s2.setEnterpriseNumber("ENT-123");
        s2.setCompanyName("Alpha");

        assertThat(s1).isEqualTo(s2);
        assertThat(s1.hashCode()).isEqualTo(s2.hashCode());
    }

    @Test
    void toStringIncludesFields() {
        SupplierEntity supplier = new SupplierEntity();
        supplier.setId(5L);
        supplier.setEnterpriseNumber("E-5");
        supplier.setCompanyName("Zeta Ltd");

        assertThat(supplier.toString()).contains("E-5").contains("Zeta Ltd");
    }
}
```

---

## 2. `CosConfigTest.java`

```java
package com.bnpp.pf.einvoice.connect.cos.config;

import org.junit.jupiter.api.Test;
import org.springframework.test.util.ReflectionTestUtils;

import static org.assertj.core.api.Assertions.assertThat;

class CosConfigTest {

    @Test
    void gettersAndSettersWork() {
        CosConfig config = new CosConfig();
        config.setInstance("dev-instance");
        config.setTimeOut(30);

        assertThat(config.getInstance()).isEqualTo("dev-instance");
        assertThat(config.getTimeOut()).isEqualTo(30);
    }

    @Test
    void reflectionCanSetComplexFields() {
        CosConfig config = new CosConfig();

        Bucket bucket = new Bucket(); // assuming Bucket is a simple POJO
        Iam iam = new Iam();          // assuming Iam is a simple POJO

        ReflectionTestUtils.setField(config, "bucket", bucket);
        ReflectionTestUtils.setField(config, "iam", iam);

        assertThat(config.getBucket()).isSameAs(bucket);
        assertThat(config.getIam()).isSameAs(iam);
    }

    @Test
    void toStringEqualsHashCodeWork() {
        CosConfig c1 = new CosConfig();
        c1.setInstance("A");
        c1.setTimeOut(5);

        CosConfig c2 = new CosConfig();
        c2.setInstance("A");
        c2.setTimeOut(5);

        assertThat(c1).isEqualTo(c2);
        assertThat(c1.hashCode()).isEqualTo(c2.hashCode());
        assertThat(c1.toString()).contains("A");
    }
}
```

---

### âœ… What this covers

* **SupplierEntity**: all Lombok-generated getters/setters, `equals`, `hashCode`, `toString`.
* **CosConfig**: getters/setters, reflection injection for `bucket` + `iam`, equality/hashCode/toString.

---

ðŸ‘‰ Do you also want me to add **negative tests** (e.g. `equals` with different values, `null` checks) to hit more branches in Lombok-generated methods?
