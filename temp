try (ZipFile zip = ZipFile.builder()
        .setFile(zipFile.toFile())
        .setCharset(StandardCharsets.UTF_8)
        .setUseRandomAccess(true)
        .get()) {

    Enumeration<ZipArchiveEntry> entries = zip.getEntries();
    while (entries.hasMoreElements()) {
        ZipArchiveEntry entry = entries.nextElement();
        if (entry.isDirectory()) continue;

        String name = entry.getName();
        if (name == null || name.isBlank() || name.contains("..")
                || name.startsWith("/") || name.startsWith("\\") || name.contains(":")) {
            throw new IOException("Unsafe entry name: " + name);
        }

        Path outputPath = canonicalTarget.resolve(name).normalize();
        if (!outputPath.startsWith(canonicalTarget)) {
            throw new IOException("Entry escapes target directory: " + name);
        }

        Files.createDirectories(outputPath.getParent());

        long entryBytes = 0;
        int bytesRead;
        byte[] buffer = new byte[4096];

        try (InputStream is = zip.getInputStream(entry);
             OutputStream os = new BufferedOutputStream(
                     Files.newOutputStream(outputPath,
                             StandardOpenOption.CREATE,
                             StandardOpenOption.TRUNCATE_EXISTING))) {

            while ((bytesRead = is.read(buffer)) != -1) {
                os.write(buffer, 0, bytesRead);
                entryBytes += bytesRead;

                if (entryBytes > MAX_ENTRY_SIZE) {
                    throw new IOException("Entry too large: " + entry.getName());
                }
                if (totalSize + entryBytes > MAX_TOTAL_SIZE) {
                    throw new IOException("Archive too large");
                }
            }
        }

        totalSize += entryBytes;
    }
}
