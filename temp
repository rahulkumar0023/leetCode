Let's break down your scenario into clear, manageable steps and implement everything step by step.

---

### **Scenario Overview**

1. **Read `.zip.pgp` files from COS Bucket**:
   - Use the COS SDK to list and fetch `.zip.pgp` files.
   - Store them as resources to pass to the `MultiResourceItemReader`.

2. **Decrypt `.pgp` Files**:
   - Decrypt the `.pgp` files to extract the `.zip` files.

3. **Extract `.zip` Files**:
   - Unzip the decrypted files to access the CSV.

4. **Process CSV Files**:
   - Use `FlatFileItemReader` with `SynchronizedItemStreamReader` to process the CSV files.

5. **Write Processed Output**:
   - Output the processed data to a database, another bucket, or any target.

---

### **Step-by-Step Implementation**

#### **Step 1: Fetch `.zip.pgp` Files from COS Bucket**

##### **COS Service**
Use the COS SDK to fetch `.zip.pgp` files and return them as Spring `Resource` objects.

```java
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.util.ArrayList;
import java.util.List;

public class CosService {

    private final AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();

    public Resource[] fetchEncryptedFiles(String bucketName, String prefix) {
        List<Resource> resources = new ArrayList<>();

        // List all files with the specified prefix
        List<S3ObjectSummary> summaries = s3Client.listObjects(bucketName, prefix).getObjectSummaries();
        for (S3ObjectSummary summary : summaries) {
            S3Object s3Object = s3Client.getObject(bucketName, summary.getKey());
            resources.add(new InputStreamResource(s3Object.getObjectContent()));
        }

        return resources.toArray(new Resource[0]);
    }
}
```

---

#### **Step 2: Decrypt `.pgp` Files**

Use your existing `decrypt` method to handle the decryption logic and wrap it in a utility class.

##### **Decryption Utility**
```java
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class DecryptionUtil {

    private final Decryptor decryptor;

    public DecryptionUtil(Decryptor decryptor) {
        this.decryptor = decryptor;
    }

    public Resource decryptResource(Resource encryptedResource) throws Exception {
        InputStream encryptedStream = encryptedResource.getInputStream();

        // Decrypt to a ByteArrayOutputStream
        ByteArrayOutputStream decryptedOutputStream = new ByteArrayOutputStream();
        decryptor.decrypt(encryptedStream, decryptedOutputStream);

        // Convert the decrypted output to an InputStream and wrap as a Resource
        return new InputStreamResource(new ByteArrayInputStream(decryptedOutputStream.toByteArray()));
    }
}
```

---

#### **Step 3: Extract `.zip` Files**

Unzip the decrypted files to access the CSV files.

##### **Unzip Utility**
```java
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.util.zip.ZipInputStream;
import org.springframework.core.io.Resource;

public class UnzipUtil {

    public InputStream extractCsvFromZip(Resource decryptedResource) throws Exception {
        InputStream zipInputStream = new BufferedInputStream(decryptedResource.getInputStream());
        ZipInputStream zis = new ZipInputStream(zipInputStream);

        // Assume the first entry is the CSV
        zis.getNextEntry();
        return zis; // Return the stream of the CSV file
    }
}
```

---

#### **Step 4: MultiResourceItemReader**

Create a custom `MultiResourceItemReader` that:
1. Fetches `.zip.pgp` files.
2. Decrypts them.
3. Extracts the CSV files.

##### **Custom MultiResourceItemReader**
```java
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.core.io.Resource;

public class DecryptingMultiResourceItemReader<T> extends MultiResourceItemReader<T> {

    private final DecryptionUtil decryptionUtil;
    private final UnzipUtil unzipUtil;

    public DecryptingMultiResourceItemReader(DecryptionUtil decryptionUtil, UnzipUtil unzipUtil) {
        this.decryptionUtil = decryptionUtil;
        this.unzipUtil = unzipUtil;
    }

    public void setEncryptedResources(Resource[] encryptedResources) {
        Resource[] decryptedCsvResources = new Resource[encryptedResources.length];
        for (int i = 0; i < encryptedResources.length; i++) {
            try {
                // Decrypt and extract the CSV
                Resource decryptedResource = decryptionUtil.decryptResource(encryptedResources[i]);
                decryptedCsvResources[i] = new InputStreamResource(unzipUtil.extractCsvFromZip(decryptedResource));
            } catch (Exception e) {
                throw new RuntimeException("Failed to process resource: " + encryptedResources[i].getDescription(), e);
            }
        }
        super.setResources(decryptedCsvResources);
    }
}
```

---

#### **Step 5: FlatFileItemReader**

Use `FlatFileItemReader` to process the decrypted and unzipped CSV files.

```java
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;

@Bean
public FlatFileItemReader<MyData> flatFileItemReader() {
    FlatFileItemReader<MyData> reader = new FlatFileItemReader<>();
    reader.setLinesToSkip(1); // Skip header row

    // Configure LineMapper
    DefaultLineMapper<MyData> lineMapper = new DefaultLineMapper<>();
    DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
    tokenizer.setNames("id", "name", "value"); // Define columns
    lineMapper.setLineTokenizer(tokenizer);
    lineMapper.setFieldSetMapper(fieldSet -> new MyData(
            fieldSet.readInt("id"),
            fieldSet.readString("name"),
            fieldSet.readDouble("value")
    ));
    reader.setLineMapper(lineMapper);

    return reader;
}
```

---

#### **Step 6: SynchronizedItemStreamReader**

Wrap the `MultiResourceItemReader` in `SynchronizedItemStreamReader` to ensure thread safety.

```java
import org.springframework.batch.item.support.SynchronizedItemStreamReader;

@Bean
public SynchronizedItemStreamReader<MyData> synchronizedItemStreamReader(DecryptingMultiResourceItemReader<MyData> multiResourceItemReader) {
    SynchronizedItemStreamReader<MyData> synchronizedReader = new SynchronizedItemStreamReader<>();
    synchronizedReader.setDelegate(multiResourceItemReader);
    return synchronizedReader;
}
```

---

#### **Step 7: Spring Batch Step Configuration**

```java
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.ItemWriter;

@Bean
public Step processStep(StepBuilderFactory stepBuilderFactory,
                        SynchronizedItemStreamReader<MyData> synchronizedReader,
                        ItemWriter<MyData> itemWriter) {
    return stepBuilderFactory.get("processStep")
            .<MyData, MyData>chunk(10)
            .reader(synchronizedReader)
            .writer(itemWriter)
            .build();
}
```

---

#### **Step 8: Spring Batch Job Configuration**

```java
import org.springframework.batch.core.Job;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;

@Bean
public Job processEncryptedCsvJob(JobBuilderFactory jobBuilderFactory, Step processStep) {
    return jobBuilderFactory.get("processEncryptedCsvJob")
            .start(processStep)
            .build();
}
```

---

### **Key Components Recap**

1. **COS Service**: Fetch `.zip.pgp` files as resources.
2. **Decryption Utility**: Decrypt `.pgp` files.
3. **Unzip Utility**: Extract CSV files from `.zip` archives.
4. **MultiResourceItemReader**: Chain all the steps for each file.
5. **FlatFileItemReader**: Parse the decrypted and unzipped CSV files.
6. **Spring Batch Step**: Process each record sequentially or in chunks.

Let me know if you need help testing or debugging this implementation! ðŸš€
