// 3️⃣ Pre-validate entry name
if (entryName == null || entryName.trim().isEmpty()) {
    continue; // Skip blanks
}

// Reject traversal attempts or weird absolute names
if (entryName.contains("..") || entryName.contains(":") ||
    entryName.startsWith("/") || entryName.startsWith("\\") ||
    entryName.contains("//") || entryName.contains("\\\\")) {
    throw new IOException("Unsafe ZIP entry name: " + entryName);
}

// 4️⃣ Manual canonical validation before creating Path
File baseCanonical = baseDir.getCanonicalFile();
File outFile = new File(baseCanonical, entryName);
File outCanonical = outFile.getCanonicalFile();

// If the canonicalized output path is not within base, reject it
if (!outCanonical.getPath().startsWith(baseCanonical.getPath() + File.separator)) {
    throw new IOException("Entry is outside target dir: " + entryName);
}

// 5️⃣ Proceed safely
if (entry.isDirectory()) {
    Files.createDirectories(outCanonical.toPath());
    continue;
}
Files.createDirectories(outCanonical.getParentFile().toPath());

// Now write safely
try (OutputStream out = Files.newOutputStream(outCanonical.toPath())) {
    zis.transferTo(out);
}
