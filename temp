import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestTemplateBuilder;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class RestApiClientTest {

    @Mock
    private RestTemplateBuilder restTemplateBuilder;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ObjectMapper objectMapper;

    private RestApiClient restApiClient;

    @BeforeEach
    void setUp() {
        // Mock RestTemplate behavior
        when(restTemplateBuilder.basicAuthentication(anyString(), anyString())).thenReturn(restTemplateBuilder);
        when(restTemplateBuilder.build()).thenReturn(restTemplate);

        // Manually instantiate RestApiClient with mocked dependencies
        restApiClient = new RestApiClient(restTemplateBuilder, objectMapper);
    }

    @Test
    void testNotifyUpload_Success_A() throws Exception {
        // Mock Response
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenReturn(mockResponse);
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");

        // Execute
        assertDoesNotThrow(() -> restApiClient.notifyUpload("A", "test-file.pgp"));

        // Verify that exchange() was called once
        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(String.class), any(Map.class));
    }

    @Test
    void testNotifyUpload_Success_B() throws Exception {
        // Mock Response
        ResponseEntity<String> mockResponse = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenReturn(mockResponse);
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");

        // Execute
        assertDoesNotThrow(() -> restApiClient.notifyUpload("B", "test-file.pgp"));

        // Verify that exchange() was called once
        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(String.class), any(Map.class));
    }

    @Test
    void testNotifyUpload_InvalidDestination() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                restApiClient.notifyUpload("C", "test-file.pgp")
        );
        assertEquals("❌ Invalid destination: C", exception.getMessage());
    }

    @Test
    void testNotifyUpload_ApiCallFailure() throws Exception {
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"fname\":\"test-file.pgp\"}");
        when(restTemplate.exchange(anyString(), any(), any(), eq(String.class), any(Map.class)))
                .thenThrow(new RuntimeException("API Error"));

        Exception exception = assertThrows(RuntimeException.class, () ->
                restApiClient.notifyUpload("A", "test-file.pgp")
        );
        assertEquals("API Error", exception.getMessage());
    }
}
