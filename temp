Perfect 👍 — I can see from your screenshots that the **red-marked lines** correspond to the following method inside your `PackageAndUploadTasklet`:

```java
private void zipEncryptUploadFiles(Path processedFile, String zipFilePrefix) throws IOException {
    String zipFileName = zipFilePrefix + "_invoices_" + getCurrentDateTimeValue() + ".zip";

    // Step 1: Zip
    File zipFile = OUTPUT_DIR.resolve(zipFileName).toFile();
    zipDirectory(processedFile, zipFile);

    // Step 2: Encrypt
    String encryptedFileName = zipFileName + ".pgp";
    File encryptedFile = OUTPUT_DIR.resolve(encryptedFileName).toFile();
}
```

Let’s create a **JUnit 5 + Mockito** test that covers this code path completely — verifying that the zip file and encrypted file are created with correct names and ensuring that the method executes without errors.

---

## ✅ **JUnit Test: `PackageAndUploadTaskletTest`**

```java
package com.example.batch.tasklet;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class PackageAndUploadTaskletTest {

    @Mock
    private CosStorageService cosStorageService;
    @Mock
    private CFTApiClient cftApiClient;
    @Mock
    private PGPEncrypt pgpEncrypt;

    @InjectMocks
    private PackageAndUploadTasklet tasklet;

    @TempDir
    Path tempDir;

    @Test
    void testZipEncryptUploadFiles_createsExpectedFiles() throws Exception {
        // Arrange
        Path processedDir = Files.createDirectories(tempDir.resolve("processedDir"));
        Files.createFile(processedDir.resolve("sample.xml"));

        // Set OUTPUT_DIR (private static final)
        ReflectionTestUtils.setField(tasklet, "OUTPUT_DIR", tempDir);

        // Spy on the tasklet to mock internal method zipDirectory
        PackageAndUploadTasklet spyTasklet = spy(tasklet);
        doNothing().when(spyTasklet).zipDirectory(any(Path.class), any(File.class));

        // Act
        spyTasklet.getClass()
                .getDeclaredMethod("zipEncryptUploadFiles", Path.class, String.class)
                .setAccessible(true);
        spyTasklet.getClass()
                .getDeclaredMethod("zipEncryptUploadFiles", Path.class, String.class)
                .invoke(spyTasklet, processedDir, "miles");

        // Assert
        // Verify zipDirectory called once
        verify(spyTasklet, times(1)).zipDirectory(any(Path.class), any(File.class));

        // Verify .zip and .pgp files exist in OUTPUT_DIR
        File[] generated = tempDir.toFile().listFiles();
        assertThat(generated)
                .isNotNull()
                .anyMatch(f -> f.getName().startsWith("miles_invoices_") && f.getName().endsWith(".zip"));
        assertThat(generated)
                .anyMatch(f -> f.getName().startsWith("miles_invoices_") && f.getName().endsWith(".pgp"));
    }
}
```

---

### 🧩 **What this test covers**

✅ Lines in red:

* `String zipFileName = zipFilePrefix + "_invoices_" + getCurrentDateTimeValue() + ".zip";`
* Creation of `zipFile`
* Invocation of `zipDirectory(processedFile, zipFile)`
* Creation of `.pgp` encrypted file name and output path

✅ Mocks external dependencies (`CosStorageService`, `CFTApiClient`, `PGPEncrypt`)
✅ Avoids actual compression or encryption — uses a spy with `doNothing()`
✅ Verifies file name structure and that both `.zip` and `.pgp` files are generated

---

### 🧠 **Optional improvement**

If you want to also test integration with `pgpEncrypt` (instead of just the naming), add:

```java
verify(pgpEncrypt, times(1)).encryptFile(any(File.class), any(File.class));
```

—but only if your actual implementation calls `pgpEncrypt.encryptFile()` inside that method.

---

Would you like me to also include a **version that stubs `getCurrentDateTimeValue()`** to make the filenames deterministic (useful for CI coverage snapshots)?
