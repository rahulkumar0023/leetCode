Here's the **step-by-step guide** to implement your scenario: **Read `.zip.pgp` files from the COS bucket, decrypt and unzip them, and process the resulting CSV files using Spring Batch.**

---

### **1. Scenario Overview**

1. **Read `.zip.pgp` files** from a **COS bucket** using the COS SDK.
2. **Decrypt the `.pgp` files** to extract the `.zip` files.
3. **Unzip the `.zip` files** to access the CSV files.
4. **Process the CSV files** using Spring Batch.
5. **Write the processed output** to a target (e.g., database, another bucket, or console).

---

### **2. Full Implementation Steps**

#### **Step 1: Fetch `.zip.pgp` Files from COS Bucket**

##### **COS Service**
Create a service to fetch `.zip.pgp` files from the COS bucket and return them as Spring `Resource` objects.

```java
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.util.ArrayList;
import java.util.List;

public class CosService {

    private final AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();

    public Resource[] fetchEncryptedFiles(String bucketName, String prefix) {
        List<Resource> resources = new ArrayList<>();

        // List files in the COS bucket
        List<S3ObjectSummary> summaries = s3Client.listObjects(bucketName, prefix).getObjectSummaries();
        for (S3ObjectSummary summary : summaries) {
            S3Object s3Object = s3Client.getObject(bucketName, summary.getKey());
            resources.add(new InputStreamResource(s3Object.getObjectContent()));
        }

        return resources.toArray(new Resource[0]);
    }
}
```

---

#### **Step 2: Decrypt `.pgp` Files**

##### **Decryption Utility**
Use your `decrypt` method to handle `.pgp` decryption.

```java
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class DecryptionUtil {

    private final Decryptor decryptor;

    public DecryptionUtil(Decryptor decryptor) {
        this.decryptor = decryptor;
    }

    public Resource decryptResource(Resource encryptedResource) throws Exception {
        InputStream encryptedStream = encryptedResource.getInputStream();

        // Decrypt to a ByteArrayOutputStream
        ByteArrayOutputStream decryptedOutputStream = new ByteArrayOutputStream();
        decryptor.decrypt(encryptedStream, decryptedOutputStream);

        // Convert the decrypted output to a Resource
        return new InputStreamResource(new ByteArrayInputStream(decryptedOutputStream.toByteArray()));
    }
}
```

---

#### **Step 3: Unzip the Decrypted `.zip` Files**

##### **Unzip Utility**
Extract the CSV files from the `.zip` files.

```java
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.util.zip.ZipInputStream;
import org.springframework.core.io.Resource;

public class UnzipUtil {

    public InputStream extractCsvFromZip(Resource decryptedResource) throws Exception {
        InputStream zipInputStream = new BufferedInputStream(decryptedResource.getInputStream());
        ZipInputStream zis = new ZipInputStream(zipInputStream);

        // Extract the first entry (assume it's the CSV)
        zis.getNextEntry();
        return zis;
    }
}
```

---

#### **Step 4: Create `DecryptingMultiResourceItemReader`**

Wrap the decryption and unzipping logic into a custom `MultiResourceItemReader`.

```java
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;

public class DecryptingMultiResourceItemReader<T> extends MultiResourceItemReader<T> {

    private final DecryptionUtil decryptionUtil;
    private final UnzipUtil unzipUtil;

    public DecryptingMultiResourceItemReader(DecryptionUtil decryptionUtil, UnzipUtil unzipUtil) {
        this.decryptionUtil = decryptionUtil;
        this.unzipUtil = unzipUtil;
    }

    public void setEncryptedResources(Resource[] encryptedResources) {
        Resource[] decryptedCsvResources = new Resource[encryptedResources.length];
        for (int i = 0; i < encryptedResources.length; i++) {
            try {
                // Decrypt and extract CSV
                Resource decryptedResource = decryptionUtil.decryptResource(encryptedResources[i]);
                decryptedCsvResources[i] = new InputStreamResource(unzipUtil.extractCsvFromZip(decryptedResource));
            } catch (Exception e) {
                throw new RuntimeException("Failed to process resource: " + encryptedResources[i].getDescription(), e);
            }
        }
        super.setResources(decryptedCsvResources);
    }
}
```

---

#### **Step 5: Configure `FlatFileItemReader`**

Use `FlatFileItemReader` to process the decrypted and unzipped CSV files.

```java
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;

@Bean
public FlatFileItemReader<MyData> flatFileItemReader() {
    FlatFileItemReader<MyData> reader = new FlatFileItemReader<>();
    reader.setLinesToSkip(1); // Skip header row

    DefaultLineMapper<MyData> lineMapper = new DefaultLineMapper<>();
    DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
    tokenizer.setNames("id", "name", "value"); // CSV column names
    lineMapper.setLineTokenizer(tokenizer);
    lineMapper.setFieldSetMapper(fieldSet -> new MyData(
            fieldSet.readInt("id"),
            fieldSet.readString("name"),
            fieldSet.readDouble("value")
    ));
    reader.setLineMapper(lineMapper);

    return reader;
}
```

---

#### **Step 6: Wrap with `SynchronizedItemStreamReader`**

Ensure thread safety by wrapping `DecryptingMultiResourceItemReader`.

```java
import org.springframework.batch.item.support.SynchronizedItemStreamReader;

@Bean
public SynchronizedItemStreamReader<MyData> synchronizedItemStreamReader(
        DecryptingMultiResourceItemReader<MyData> multiResourceItemReader) {
    SynchronizedItemStreamReader<MyData> synchronizedReader = new SynchronizedItemStreamReader<>();
    synchronizedReader.setDelegate(multiResourceItemReader);
    return synchronizedReader;
}
```

---

#### **Step 7: Spring Batch Step Configuration**

Configure the Spring Batch step.

```java
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.ItemWriter;

@Bean
public Step processStep(StepBuilderFactory stepBuilderFactory,
                        SynchronizedItemStreamReader<MyData> synchronizedReader,
                        ItemWriter<MyData> itemWriter) {
    return stepBuilderFactory.get("processStep")
            .<MyData, MyData>chunk(10)
            .reader(synchronizedReader)
            .writer(itemWriter)
            .build();
}
```

---

#### **Step 8: Spring Batch Job Configuration**

Define the job to link the step.

```java
import org.springframework.batch.core.Job;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;

@Bean
public Job processEncryptedCsvJob(JobBuilderFactory jobBuilderFactory, Step processStep) {
    return jobBuilderFactory.get("processEncryptedCsvJob")
            .start(processStep)
            .build();
}
```

---

#### **Step 9: Inject Dependencies and Initialize**

In your main application or configuration class, initialize the dependencies.

```java
@SpringBootApplication
public class BatchProcessingApplication {

    public static void main(String[] args) {
        SpringApplication.run(BatchProcessingApplication.class, args);
    }

    @Bean
    public CosService cosService() {
        return new CosService();
    }

    @Bean
    public Decryptor decryptor() {
        return new Decryptor(); // Your existing decryption logic
    }

    @Bean
    public DecryptionUtil decryptionUtil(Decryptor decryptor) {
        return new DecryptionUtil(decryptor);
    }

    @Bean
    public UnzipUtil unzipUtil() {
        return new UnzipUtil();
    }
}
```

---

### **Execution Summary**

1. **COS Service** fetches `.zip.pgp` files.
2. **DecryptingMultiResourceItemReader** decrypts and unzips files.
3. **FlatFileItemReader** processes CSV rows.
4. **Spring Batch Step** orchestrates the pipeline.
5. **Spring Batch Job** runs the step.

Let me know if you need further help with testing or debugging! ðŸš€
