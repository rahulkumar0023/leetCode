private void unzipFile(File zipFile, Path targetDir) throws IOException {
    // 1. Validate the zip input
    if (!zipFile.exists() || !zipFile.isFile() || !zipFile.canRead()) {
        throw new IOException("Invalid zip file: " + zipFile);
    }

    // 2. Ensure target directory exists
    Files.createDirectories(targetDir);
    String canonicalTarget = targetDir.toFile().getCanonicalPath();

    log.info("Unzipping: {}", zipFile.getCanonicalPath());
    log.info("Target directory: {}", canonicalTarget);

    final int    MAX_ENTRIES     = 10_000;
    final long   MAX_TOTAL_SIZE  = 1_000_000_000L; // 1 GB
    final double MAX_RATIO       = 10.0;

    int entryCount = 0;
    long totalSize = 0;

    try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
        ZipEntry entry;
        byte[] buffer = new byte[4096];

        while ((entry = zis.getNextEntry()) != null) {
            String entryName = entry.getName();

            // 3. Basic validation - reject dangerous patterns
            if (entryName == null || entryName.isBlank()) {
                throw new IOException("Invalid entry name");
            }
            if (entryName.contains("..") || entryName.contains(":")
                    || entryName.startsWith("/") || entryName.startsWith("\\")) {
                throw new IOException("Unsafe entry name: " + entryName);
            }

            // 4. Build the output file and validate canonical location
            File outFile = new File(targetDir.toFile(), entryName);
            String canonicalOutput = outFile.getCanonicalPath();

            if (!canonicalOutput.startsWith(canonicalTarget + File.separator)) {
                throw new IOException("Entry is outside target dir: " + entryName);
            }

            // 5. Create directories safely (after validation)
            if (entry.isDirectory()) {
                Files.createDirectories(outFile.toPath());
                zis.closeEntry();
                continue;
            }

            Files.createDirectories(outFile.getParentFile().toPath());

            // 6. Extract file with anti-zip-bomb checks
            try (OutputStream os =
                         new BufferedOutputStream(Files.newOutputStream(outFile.toPath()))) {
                int bytesRead;
                long entrySize = 0;
                long compressedSize = entry.getCompressedSize();

                while ((bytesRead = zis.read(buffer)) > 0) {
                    os.write(buffer, 0, bytesRead);
                    entrySize += bytesRead;
                    totalSize += bytesRead;

                    if (compressedSize > 0 &&
                            (double) entrySize / compressedSize > MAX_RATIO) {
                        throw new IOException("Zip bomb detected (ratio > " + MAX_RATIO + ")");
                    }

                    if (totalSize > MAX_TOTAL_SIZE) {
                        throw new IOException("Archive too large (>" + MAX_TOTAL_SIZE + " bytes)");
                    }
                }
            }

            entryCount++;
            if (entryCount > MAX_ENTRIES) {
                throw new IOException("Too many entries (" + entryCount + ")");
            }

            zis.closeEntry();
        }
    }

    log.info("Unzip completed: {} entries, {} bytes extracted",
            entryCount, totalSize);
}
