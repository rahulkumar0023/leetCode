Excellent — you’ve now shared more uncovered parts of your `CsvInvoiceMapper`:

* Customer section (`toAccountingCustomerParty`)
* Address mapping for customer (similar to supplier)
* `toAmount(String)`
* `toAllowanceChargeList(CsvInvoiceDto)`
* `toXmlDate(String)`

Here are focused **JUnit 5 tests** for these red-marked areas.
They combine **AssertJ**, **Mockito**, and real class instances for full coverage.

---

## ✅ 1. `toAmount(String)` — null, blank, valid values

```java
@Test
void toAmount_returnsNullForNullOrBlank() throws Exception {
    var mapper = new CsvInvoiceMapperImpl();
    assertThat(mapper.toAmount(null)).isNull();
    assertThat(mapper.toAmount("   ")).isNull();
}

@Test
void toAmount_convertsValidNumber() throws Exception {
    var mapper = new CsvInvoiceMapperImpl();
    assertThat(mapper.toAmount("123.45"))
            .isEqualByComparingTo("123.45");
}
```

Covers both branches (null/blank + valid).

---

## ✅ 2. `toXmlDate(String)` — valid + invalid + null

Your code throws `InvoiceProcessingException` when invalid, so we verify that too.

```java
import static org.assertj.core.api.Assertions.*;

@Test
void toXmlDate_parsesValidDate() throws Exception {
    var mapper = new CsvInvoiceMapperImpl();
    var xmlDate = mapper.toXmlDate("2025-10-13");
    assertThat(xmlDate.toXMLFormat()).isEqualTo("2025-10-13");
}

@Test
void toXmlDate_throwsOnNullOrInvalid() {
    var mapper = new CsvInvoiceMapperImpl();
    assertThatThrownBy(() -> mapper.toXmlDate(null))
            .hasMessageContaining("Invalid date");
    assertThatThrownBy(() -> mapper.toXmlDate("not-a-date"))
            .isInstanceOf(InvoiceProcessingException.class)
            .hasMessageContaining("Invalid date");
}
```

---

## ✅ 3. Customer Party Mapping (`toAccountingCustomerParty`)

We’ll verify that:

* email sets `Contact → ElectronicMailType`
* ID and Address fields populate correctly
* empty DTO skips everything

```java
@Test
void mapsCustomerEmailAndAddressFields_whenPresent() {
    var mapper = new CsvInvoiceMapperImpl();
    var dto = new CsvInvoiceDto();
    dto.setCustomerEmail("buyer@example.com");
    dto.setCustomerPartyIdentificationCbcId("BE999");
    dto.setCustomerStreetName("Rue 1");
    dto.setCustomerCityName("Antwerp");
    dto.setCustomerPostalZone("2000");
    dto.setCustomerCountryCbcIdentificationCode("BE");

    var cust = mapper.toAccountingCustomerParty(dto);
    var party = cust.getParty();

    assertThat(party.getContact().getElectronicMail().getValue())
            .isEqualTo("buyer@example.com");

    var legal = party.getPartyLegalEntity();
    assertThat(legal).isNotNull();

    var addr = legal.getRegistrationAddress();
    assertThat(addr.getStreetName().getValue()).isEqualTo("Rue 1");
    assertThat(addr.getCityName().getValue()).isEqualTo("Antwerp");
    assertThat(addr.getPostalZone().getValue()).isEqualTo("2000");
    assertThat(addr.getCountry().getIdentificationCode().getValue()).isEqualTo("BE");
}

@Test
void skipsEmptyCustomerFields() {
    var mapper = new CsvInvoiceMapperImpl();
    var cust = mapper.toAccountingCustomerParty(new CsvInvoiceDto());
    assertThat(cust).isNotNull();
    assertThat(cust.getParty().getContact()).isNull();
}
```

This covers all the `if(StringUtils.isNotEmpty(...))` branches under customer mapping.

---

## ✅ 4. `toAllowanceChargeList(CsvInvoiceDto)`

Your logic:

* parses boolean `ChargeIndicator`
* returns empty list if false
* sets charge, base amount, reason when fields exist.

```java
@Test
void toAllowanceChargeList_returnsEmptyWhenIndicatorFalse() {
    var mapper = new CsvInvoiceMapperImpl();
    var dto = new CsvInvoiceDto();
    dto.setAllowanceChargeCbcChargeIndicator("false");
    assertThat(mapper.toAllowanceChargeList(dto)).isEmpty();
}

@Test
void toAllowanceChargeList_buildsChargeWhenIndicatorTrue() {
    var mapper = new CsvInvoiceMapperImpl();
    var dto = new CsvInvoiceDto();
    dto.setAllowanceChargeCbcChargeIndicator("true");
    dto.setAllowanceChargeCbcAmount("12.50");
    dto.setAllowanceChargeCbcBaseAmount("100");
    dto.setBaseAmountCbcCurrencyId("EUR");
    dto.setAllowanceChargeReason("Discount");

    var list = mapper.toAllowanceChargeList(dto);
    assertThat(list).hasSize(1);
    var charge = list.get(0);
    assertThat(charge.getChargeIndicator().isValue()).isTrue();
    assertThat(charge.getAmount().getValue()).isEqualByComparingTo("12.50");
    assertThat(charge.getBaseAmount().getValue()).isEqualByComparingTo("100");
    assertThat(charge.getAllowanceChargeReason().get(0).getValue())
            .isEqualTo("Discount");
}
```

---

## ✅ Summary of what these cover

| Section                         | Branches Covered                   |
| ------------------------------- | ---------------------------------- |
| `toAmount`                      | null + blank + valid               |
| `toXmlDate`                     | valid + null + invalid             |
| `toAccountingCustomerParty`     | email set + id/address + null      |
| `toAllowanceChargeList`         | indicator false + true + populated |
| `StringUtils.isNotEmpty` guards | all exercised                      |

These will push your coverage up dramatically for all the lines in your new screenshots (especially 350–370, 740–770, and 860–865).

---

Would you like me to **bundle these tests** into one ready-to-run class (e.g. `CsvInvoiceMapperAdvancedTest.java`) with the correct imports and your exact package name (`com.bnpp.pf.einvoice.connect.batch.csv`) so you can drop it straight in?
