package com.example.soapclient.config;

import com.example.soapclient.wsdl.MyRequest;
import com.example.soapclient.wsdl.MyResponse;
import com.example.soapclient.wsdl.MyServicePort;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.SecureRandom;

@Configuration
public class SoapClientConfig {

    @Value("${soap.client.keystore.path}")
    private Resource keyStore;

    @Value("${soap.client.keystore.password}")
    private String keyStorePassword;

    @Value("${soap.client.truststore.path}")
    private Resource trustStore;

    @Value("${soap.client.truststore.password}")
    private String trustStorePassword;

    @Value("${soap.client.default-uri}")
    private String defaultUri;

    @Bean
    public MyServicePort jaxWsClient() throws Exception {
        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
        factory.setServiceClass(MyServicePort.class);
        factory.setAddress(defaultUri);

        MyServicePort client = (MyServicePort) factory.create();

        Client proxy = ClientProxy.getClient(client);
        HTTPConduit conduit = (HTTPConduit) proxy.getConduit();

        TLSClientParameters tlsParams = new TLSClientParameters();
        tlsParams.setDisableCNCheck(true);
        tlsParams.setSSLSocketFactory(sslContext().getSocketFactory());

        conduit.setTlsClientParameters(tlsParams);

        return client;
    }

    @Bean
    public SSLContext sslContext() throws Exception {
        KeyStore clientStore = KeyStore.getInstance(KeyStore.getDefaultType());
        try (InputStream ksStream = keyStore.getInputStream()) {
            clientStore.load(ksStream, keyStorePassword.toCharArray());
        }

        KeyStore trustStoreInstance = KeyStore.getInstance(KeyStore.getDefaultType());
        try (InputStream tsStream = trustStore.getInputStream()) {
            trustStoreInstance.load(tsStream, trustStorePassword.toCharArray());
        }

        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(clientStore, keyStorePassword.toCharArray());

        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(trustStoreInstance);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), new SecureRandom());
        return sslContext;
    }
}

@Service
class SoapClient {

    private final MyServicePort myServicePort;

    public SoapClient(MyServicePort myServicePort) {
        this.myServicePort = myServicePort;
    }

    public MyResponse callSoapService(MyRequest request) {
        return myServicePort.someSoapOperation(request); // Replace with actual method
    }

    @PostConstruct
    public void testConnection() {
        try {
            System.out.println("Testing SOAP connection...");
            // You might invoke a lightweight operation or metadata call here
        } catch (Exception ex) {
            System.err.println("SOAP test connection failed: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}
