import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import org.springframework.core.io.InputStreamResource;

import java.util.ArrayList;
import java.util.List;

public class CosService {

    private final AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();

    public List<InputStreamResource> fetchFiles(String bucketName, String prefix) {
        List<InputStreamResource> resources = new ArrayList<>();
        ObjectListing objectListing = s3Client.listObjects(bucketName, prefix);

        for (S3ObjectSummary summary : objectListing.getObjectSummaries()) {
            S3Object s3Object = s3Client.getObject(bucketName, summary.getKey());
            resources.add(new InputStreamResource(s3Object.getObjectContent()));
        }

        return resources;
    }
}


import org.bouncycastle.openpgp.PGPPrivateKey;
import org.bouncycastle.openpgp.PGPObjectFactory;
import org.bouncycastle.openpgp.PGPPublicKeyEncryptedData;
import org.bouncycastle.openpgp.PGPUtil;

import java.io.*;
import java.util.zip.ZipInputStream;

public class PgpDecryptionUtils {

    public InputStream decryptAndDecompress(InputStream encryptedInputStream, PGPPrivateKey privateKey, char[] passphrase) throws Exception {
        // Step 1: Decrypt the PGP file
        InputStream decryptedStream = decrypt(encryptedInputStream, privateKey, passphrase);

        // Step 2: Decompress the ZIP file
        return decompressZip(decryptedStream);
    }

    private InputStream decrypt(InputStream encryptedInputStream, PGPPrivateKey privateKey, char[] passphrase) throws Exception {
        InputStream pgpInputStream = PGPUtil.getDecoderStream(encryptedInputStream);
        PGPObjectFactory pgpObjectFactory = new PGPObjectFactory(pgpInputStream, null);

        PGPPublicKeyEncryptedData encryptedData = (PGPPublicKeyEncryptedData) pgpObjectFactory.nextObject();
        return new BufferedInputStream(encryptedData.getDataStream(privateKey, "BC"));
    }

    private InputStream decompressZip(InputStream decryptedStream) throws IOException {
        ZipInputStream zipInputStream = new ZipInputStream(decryptedStream);
        zipInputStream.getNextEntry(); // Access the first entry in the ZIP file
        return new BufferedInputStream(zipInputStream);
    }
}


import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.core.io.InputStreamResource;

import java.util.List;

public class DecryptingMultiResourceItemReader<T> extends MultiResourceItemReader<T> {

    private final PgpDecryptionUtils pgpDecryptionUtils;
    private final PGPPrivateKey privateKey;
    private final char[] passphrase;

    public DecryptingMultiResourceItemReader(PgpDecryptionUtils pgpDecryptionUtils, PGPPrivateKey privateKey, char[] passphrase) {
        this.pgpDecryptionUtils = pgpDecryptionUtils;
        this.privateKey = privateKey;
        this.passphrase = passphrase;
    }

    public void setEncryptedResources(List<InputStreamResource> encryptedResources) {
        setResources(encryptedResources.stream()
                .map(resource -> {
                    try {
                        return new InputStreamResource(pgpDecryptionUtils.decryptAndDecompress(resource.getInputStream(), privateKey, passphrase));
                    } catch (Exception e) {
                        throw new RuntimeException("Error decrypting and decompressing resource", e);
                    }
                }).toArray(InputStreamResource[]::new));
    }
}
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;

@Bean
public FlatFileItemReader<MyData> flatFileItemReader() {
    FlatFileItemReader<MyData> reader = new FlatFileItemReader<>();
    reader.setLinesToSkip(1); // Skip header line

    DefaultLineMapper<MyData> lineMapper = new DefaultLineMapper<>();
    DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
    tokenizer.setNames("column1", "column2", "column3");
    lineMapper.setLineTokenizer(tokenizer);
    lineMapper.setFieldSetMapper(fieldSet -> new MyData(
            fieldSet.readString("column1"),
            fieldSet.readInt("column2"),
            fieldSet.readString("column3")
    ));
    reader.setLineMapper(lineMapper);

    return reader;
}


import org.springframework.batch.item.support.SynchronizedItemStreamReader;

@Bean
public SynchronizedItemStreamReader<MyData> synchronizedItemStreamReader(DecryptingMultiResourceItemReader<MyData> multiResourceItemReader) {
    SynchronizedItemStreamReader<MyData> synchronizedReader = new SynchronizedItemStreamReader<>();
    synchronizedReader.setDelegate(multiResourceItemReader);
    return synchronizedReader;
}

import org.springframework.context.annotation.Bean;

@Bean
public DecryptingMultiResourceItemReader<MyData> decryptingMultiResourceItemReader(CosService cosService, Decryptor decryptor) {
    // Step 1: Fetch the list of encrypted files from COS
    List<InputStreamResource> encryptedFiles = cosService.fetchFiles("my-bucket", "encrypted-files/");

    // Step 2: Pass the encrypted files to the reader
    DecryptingMultiResourceItemReader<MyData> multiResourceItemReader = new DecryptingMultiResourceItemReader<>(decryptor);
    multiResourceItemReader.setEncryptedResources(encryptedFiles);

    return multiResourceItemReader;
}

